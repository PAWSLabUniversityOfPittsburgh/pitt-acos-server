/*!
 * JSVEE - JavaScript Visual Execution Environment Library
 * (c) Teemu SirkiÃ¤ and Aalto University, 2015 
 * Licensed under MIT license 
 * 
 * Compiled at: 2015-12-07 09:25
 */
'use strict';(function(a){if(window.JSVEE===undefined){return}JSVEE.animations={};JSVEE.animations.getAnimation=function(b){if(JSVEE.animations.hasOwnProperty(b)){return JSVEE.animations[b]}return null};JSVEE.animations.ae_adl_hello={lines:['print("Hello world!")'],settings:{code:"left",heapHeight:0,stackHeight:150,width:800},init:[["createFrame"],["setLine","1"],["createFunction","print","print(value)","1","-1"]],steps:[["goto","@l0"],["_label","l0"],["addFunction","print","0","1"],["addValue","Hello world!","0/0/0","str"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_variables={lines:["a = 2","a = a + 3",'print("The result is now", a)',"","a = 1 + a",'print("The result is now", a)',"","a = 9",'print("The result is now", a)'],settings:{code:"left",heapHeight:0,stackHeight:150,width:800},init:[["createFrame"],["setLine","1"],["createOperator","+","lr"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l0"],["addValue","2","0","int"],["assign","a"],["setLine","2"],["addValueFromVariable","a","0"],["addOperator","+","1"],["addValue","3","2","int"],["evaluateOperator","1"],["assign","a"],["setLine","3"],["addFunction","print","0","2"],["addValue","The result is now","0/0/0","str"],["addValueFromVariable","a","0/1/0"],["evaluateFunction","0"],["setLine","5"],["addValue","1","0","int"],["addOperator","+","1"],["addValueFromVariable","a","2"],["evaluateOperator","1"],["assign","a"],["setLine","6"],["addFunction","print","0","2"],["addValue","The result is now","0/0/0","str"],["addValueFromVariable","a","0/1/0"],["evaluateFunction","0"],["setLine","8"],["addValue","9","0","int"],["assign","a"],["setLine","9"],["addFunction","print","0","2"],["addValue","The result is now","0/0/0","str"],["addValueFromVariable","a","0/1/0"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_simple_arithmetics={lines:["a = 5 + 2","b = a * 3",'print("The result is:", b)'],settings:{code:"left",heapHeight:0,stackHeight:150,width:800},init:[["createFrame"],["setLine","1"],["createOperator","+","lr"],["createOperator","*","lr"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l0"],["addValue","5","0","int"],["addOperator","+","1"],["addValue","2","2","int"],["evaluateOperator","1"],["assign","a"],["setLine","2"],["addValueFromVariable","a","0"],["addOperator","*","1"],["addValue","3","2","int"],["evaluateOperator","1"],["assign","b"],["setLine","3"],["addFunction","print","0","2"],["addValue","The result is:","0/0/0","str"],["addValueFromVariable","b","0/1/0"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_arithmetics2={lines:["a = 2 + 3 * 9","b = a * (50 - a) / 2.5",'print("The end result is", b)'],settings:{code:"left",heapHeight:0,stackHeight:150,width:800},init:[["createFrame"],["setLine","1"],["createOperator","+","lr"],["createOperator","*","lr"],["createOperator","-","lr"],["createOperator","/","lr"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l0"],["addValue","2","0","int"],["addOperator","+","1"],["addValue","3","2","int"],["addOperator","*","3"],["addValue","9","4","int"],["evaluateOperator","3"],["evaluateOperator","1"],["assign","a"],["setLine","2"],["addValueFromVariable","a","0"],["addOperator","*","1"],["addValue","50","2","int"],["addOperator","-","3"],["addValueFromVariable","a","4"],["evaluateOperator","3"],["evaluateOperator","1"],["addOperator","/","1"],["addValue","2.5","2","float"],["evaluateOperator","1"],["assign","b"],["setLine","3"],["addFunction","print","0","2"],["addValue","The end result is","0/0/0","str"],["addValueFromVariable","b","0/1/0"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_swap={lines:["first = 3","second = 8","temp = second","second = first","first = temp",'print("The first is now", first, "and the second is", second)'],settings:{code:"top",heapHeight:0,stackHeight:150,width:800},init:[["createFrame"],["setLine","1"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l0"],["addValue","3","0","int"],["assign","first"],["setLine","2"],["addValue","8","0","int"],["assign","second"],["setLine","3"],["addValueFromVariable","second","0"],["assign","temp"],["setLine","4"],["addValueFromVariable","first","0"],["assign","second"],["setLine","5"],["addValueFromVariable","temp","0"],["assign","first"],["setLine","6"],["addFunction","print","0","4"],["addValue","The first is now","0/0/0","str"],["addValueFromVariable","first","0/1/0"],["addValue","and the second is","0/2/0","str"],["addValueFromVariable","second","0/3/0"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_comparison={lines:["number1 = 45","number2 = 30","",'print("Number 1 is bigger than number 2:", number1 > number2)','print("Number 1 is smaller than number 2:", number1 < number2)','print("Number 1 is the same as number 2:", number1 == number2)','print("Number 1 is not the same as number 2:", number1 != number2)'],settings:{code:"top",heapHeight:0,stackHeight:150,width:800},init:[["createFrame"],["setLine","1"],["createOperator",">","lr"],["createOperator","<","lr"],["createOperator","==","lr"],["createOperator","!=","lr"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l0"],["addValue","45","0","int"],["assign","number1"],["setLine","2"],["addValue","30","0","int"],["assign","number2"],["setLine","4"],["addFunction","print","0","2"],["addValue","Number 1 is bigger than number 2:","0/0/0","str"],["addValueFromVariable","number1","0/1/0"],["addOperator",">","0/1/1"],["addValueFromVariable","number2","0/1/2"],["evaluateOperator","0/1/1"],["evaluateFunction","0"],["setLine","5"],["addFunction","print","0","2"],["addValue","Number 1 is smaller than number 2:","0/0/0","str"],["addValueFromVariable","number1","0/1/0"],["addOperator","<","0/1/1"],["addValueFromVariable","number2","0/1/2"],["evaluateOperator","0/1/1"],["evaluateFunction","0"],["setLine","6"],["addFunction","print","0","2"],["addValue","Number 1 is the same as number 2:","0/0/0","str"],["addValueFromVariable","number1","0/1/0"],["addOperator","==","0/1/1"],["addValueFromVariable","number2","0/1/2"],["evaluateOperator","0/1/1"],["evaluateFunction","0"],["setLine","7"],["addFunction","print","0","2"],["addValue","Number 1 is not the same as number 2:","0/0/0","str"],["addValueFromVariable","number1","0/1/0"],["addOperator","!=","0/1/1"],["addValueFromVariable","number2","0/1/2"],["evaluateOperator","0/1/1"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_logic={explanations:{line5:"Notice how the logic operator behaves. If the left-hand side gives the result, the right-hand side is not evaluated.",line6:"Notice how the logic operator behaves. If the left-hand side gives the result, the right-hand side is not evaluated.",line10:"Notice how the logic operator behaves. If the left-hand side gives the result, the right-hand side is not evaluated.",line11:"Notice how the logic operator behaves. If the left-hand side gives the result, the right-hand side is not evaluated."},lines:["account1 = 2540","account2 = 13250","price = 3400","","can_afford = account1 >= price or account2 >= price","can_afford = account2 >= price or account1 >= price","","account2 = account2 - price","","money_left = account1 > 0 and account2 > 0","limit_exceeded = account1 < 0 and account2 < 0"],settings:{code:"top",heapHeight:0,stackHeight:150,width:800},init:[["createFrame"],["setLine","1"],["createOperator",">=","lr"],["createOperator","or","n"],["createOperator","-","lr"],["createOperator",">","lr"],["createOperator","and","n"],["createOperator","<","lr"]],steps:[["goto","@l0"],["_label","l0"],["addValue","2540","0","int"],["assign","account1"],["setLine","2"],["addValue","13250","0","int"],["assign","account2"],["setLine","3"],["addValue","3400","0","int"],["assign","price"],["setLine","5"],["addValueFromVariable","account1","0"],["addOperator",">=","1"],["addValueFromVariable","price","2"],["evaluateOperator","1"],["addOperator","or","1"],["evaluateOperator","1"],["conditionalJump_","@l2","@l1"],["_label","l1"],["removeElement_","1","true"],["addValueFromVariable","account2","0"],["addOperator",">=","1"],["addValueFromVariable","price","2"],["evaluateOperator","1"],["_label","l2"],["assign","can_afford"],["setLine","6"],["addValueFromVariable","account2","0"],["addOperator",">=","1"],["addValueFromVariable","price","2"],["evaluateOperator","1"],["addOperator","or","1"],["evaluateOperator","1"],["conditionalJump_","@l4","@l3"],["_label","l3"],["removeElement_","1","true"],["addValueFromVariable","account1","0"],["addOperator",">=","1"],["addValueFromVariable","price","2"],["evaluateOperator","1"],["_label","l4"],["assign","can_afford"],["setLine","8"],["addValueFromVariable","account2","0"],["addOperator","-","1"],["addValueFromVariable","price","2"],["evaluateOperator","1"],["assign","account2"],["setLine","10"],["addValueFromVariable","account1","0"],["addOperator",">","1"],["addValue","0","2","int"],["evaluateOperator","1"],["addOperator","and","1"],["evaluateOperator","1"],["conditionalJump_","@l5","@l6"],["_label","l5"],["removeElement_","1","true"],["addValueFromVariable","account2","0"],["addOperator",">","1"],["addValue","0","2","int"],["evaluateOperator","1"],["_label","l6"],["assign","money_left"],["setLine","11"],["addValueFromVariable","account1","0"],["addOperator","<","1"],["addValue","0","2","int"],["evaluateOperator","1"],["addOperator","and","1"],["evaluateOperator","1"],["conditionalJump_","@l7","@l8"],["_label","l7"],["removeElement_","1","true"],["addValueFromVariable","account2","0"],["addOperator","<","1"],["addValue","0","2","int"],["evaluateOperator","1"],["_label","l8"],["assign","limit_exceeded"]]};
JSVEE.animations.ae_adl_hiscore1={lines:["score = 678","hi_score = 732","","if score > hi_score:","    hi_score = score",'    print("New High Score!")',"",'print("Game over!")'],settings:{code:"left",heapHeight:0,stackHeight:150,width:800},init:[["createFrame"],["setLine","1"],["createOperator",">","lr"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l0"],["addValue","678","0","int"],["assign","score"],["setLine","2"],["addValue","732","0","int"],["assign","hi_score"],["setLine","4"],["addValueFromVariable","score","0"],["addOperator",">","1"],["addValueFromVariable","hi_score","2"],["evaluateOperator","1"],["_conditionalJump","@l1","@l2"],["_label","l1"],["setLine","5"],["addValueFromVariable","score","0"],["assign","hi_score"],["setLine","6"],["addFunction","print","0","1"],["addValue","New High Score!","0/0/0","str"],["evaluateFunction","0"],["_label","l2"],["setLine","8"],["addFunction","print","0","1"],["addValue","Game over!","0/0/0","str"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_hiscore2={lines:["score = 834","hi_score = 732","","if score > hi_score:","    hi_score = score",'    print("New High Score!")',"",'print("Game over!")'],settings:{code:"left",heapHeight:0,stackHeight:150,width:800},init:[["createFrame"],["setLine","1"],["createOperator",">","lr"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l0"],["addValue","834","0","int"],["assign","score"],["setLine","2"],["addValue","732","0","int"],["assign","hi_score"],["setLine","4"],["addValueFromVariable","score","0"],["addOperator",">","1"],["addValueFromVariable","hi_score","2"],["evaluateOperator","1"],["_conditionalJump","@l1","@l2"],["_label","l1"],["setLine","5"],["addValueFromVariable","score","0"],["assign","hi_score"],["setLine","6"],["addFunction","print","0","1"],["addValue","New High Score!","0/0/0","str"],["evaluateFunction","0"],["_label","l2"],["setLine","8"],["addFunction","print","0","1"],["addValue","Game over!","0/0/0","str"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_ifelse={lines:["number = 53","","if number % 2 == 0:",'    print("It is an even number.")',"else:",'    print("It is an odd number.")',"",'print("That\'s it!")'],settings:{code:"left",heapHeight:0,stackHeight:150,width:800},init:[["createFrame"],["setLine","1"],["createOperator","%","lr"],["createOperator","==","lr"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l0"],["addValue","53","0","int"],["assign","number"],["setLine","3"],["addValueFromVariable","number","0"],["addOperator","%","1"],["addValue","2","2","int"],["evaluateOperator","1"],["addOperator","==","1"],["addValue","0","2","int"],["evaluateOperator","1"],["_conditionalJump","@l1","@l2"],["_label","l1"],["setLine","4"],["addFunction","print","0","1"],["addValue","It is an even number.","0/0/0","str"],["evaluateFunction","0"],["_goto","@l3"],["_label","l2"],["setLine","6"],["addFunction","print","0","1"],["addValue","It is an odd number.","0/0/0","str"],["evaluateFunction","0"],["_label","l3"],["setLine","8"],["addFunction","print","0","1"],["addValue","That's it!","0/0/0","str"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_ifelifelse={lines:["points = 63","","if points > 70:",'    grade = "A"',"elif points > 65:",'    grade = "B"',"elif points > 60:",'    grade = "C"',"elif points > 55:",'    grade = "D"',"elif points > 50:",'    grade = "E"',"else:",'    grade = "F"',"",'print("Your grade is:", grade)'],settings:{code:"left",heapHeight:0,stackHeight:150,width:800},init:[["createFrame"],["setLine","1"],["createOperator",">","lr"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l0"],["addValue","63","0","int"],["assign","points"],["setLine","3"],["addValueFromVariable","points","0"],["addOperator",">","1"],["addValue","70","2","int"],["evaluateOperator","1"],["_conditionalJump","@l1","@l2"],["_label","l1"],["setLine","4"],["addValue","A","0","str"],["assign","grade"],["_goto","@l3"],["_label","l2"],["setLine","5"],["addValueFromVariable","points","0"],["addOperator",">","1"],["addValue","65","2","int"],["evaluateOperator","1"],["_conditionalJump","@l4","@l5"],["_label","l4"],["setLine","6"],["addValue","B","0","str"],["assign","grade"],["_goto","@l6"],["_label","l5"],["setLine","7"],["addValueFromVariable","points","0"],["addOperator",">","1"],["addValue","60","2","int"],["evaluateOperator","1"],["_conditionalJump","@l7","@l8"],["_label","l7"],["setLine","8"],["addValue","C","0","str"],["assign","grade"],["_goto","@l9"],["_label","l8"],["setLine","9"],["addValueFromVariable","points","0"],["addOperator",">","1"],["addValue","55","2","int"],["evaluateOperator","1"],["_conditionalJump","@l10","@l11"],["_label","l10"],["setLine","10"],["addValue","D","0","str"],["assign","grade"],["_goto","@l12"],["_label","l11"],["setLine","11"],["addValueFromVariable","points","0"],["addOperator",">","1"],["addValue","50","2","int"],["evaluateOperator","1"],["_conditionalJump","@l13","@l14"],["_label","l13"],["setLine","12"],["addValue","E","0","str"],["assign","grade"],["_goto","@l15"],["_label","l14"],["setLine","14"],["addValue","F","0","str"],["assign","grade"],["_label","l15"],["_label","l12"],["_label","l9"],["_label","l6"],["_label","l3"],["setLine","16"],["addFunction","print","0","2"],["addValue","Your grade is:","0/0/0","str"],["addValueFromVariable","grade","0/1/0"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_nested_if={lines:["age = 17","hour = 14","","if age >= 15:","","    if hour < 13:",'        print("The ticket costs $2")',"     else:",'        print("The ticket costs $4")',"    ","","else:",'    print("Free entrance!")'],settings:{code:"left",heapHeight:0,stackHeight:150,width:800},init:[["createFrame"],["setLine","1"],["createOperator",">=","lr"],["createOperator","<","lr"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l0"],["addValue","17","0","int"],["assign","age"],["setLine","2"],["addValue","14","0","int"],["assign","hour"],["setLine","4"],["addValueFromVariable","age","0"],["addOperator",">=","1"],["addValue","15","2","int"],["evaluateOperator","1"],["_conditionalJump","@l1","@l2"],["_label","l1"],["setLine","6"],["addValueFromVariable","hour","0"],["addOperator","<","1"],["addValue","13","2","int"],["evaluateOperator","1"],["_conditionalJump","@l4","@l5"],["_label","l4"],["setLine","7"],["addFunction","print","0","1"],["addValue","The ticket costs $2","0/0/0","str"],["evaluateFunction","0"],["_goto","@l6"],["_label","l5"],["setLine","9"],["addFunction","print","0","1"],["addValue","The ticket costs $4","0/0/0","str"],["evaluateFunction","0"],["end"],["_label","l6"],["_goto","@l3"],["_label","l2"],["setLine","13"],["addFunction","print","0","1"],["addValue","Free entrance!","0/0/0","str"],["evaluateFunction","0"],["_label","l3"]]};
JSVEE.animations.ae_adl_while={lines:["number = 2","","while number < 15:",'    print("Number is now", number)',"    number = number * 2","",'print("Now it\'s too big. Time to end!")'],settings:{code:"left",heapHeight:0,stackHeight:150,width:800},init:[["createFrame"],["setLine","1"],["createOperator","<","lr"],["createOperator","*","lr"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l0"],["addValue","2","0","int"],["assign","number"],["_label","l1"],["setLine","3"],["addValueFromVariable","number","0"],["addOperator","<","1"],["addValue","15","2","int"],["evaluateOperator","1"],["_conditionalJump","@l2","@l3"],["_label","l2"],["setLine","4"],["addFunction","print","0","2"],["addValue","Number is now","0/0/0","str"],["addValueFromVariable","number","0/1/0"],["evaluateFunction","0"],["setLine","5"],["addValueFromVariable","number","0"],["addOperator","*","1"],["addValue","2","2","int"],["evaluateOperator","1"],["assign","number"],["goto","@l1"],["_label","l3"],["setLine","7"],["addFunction","print","0","1"],["addValue","Now it's too big. Time to end!","0/0/0","str"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_for={lines:["for i in range(1, 6):",'    print("2 *", i, "=", 2 * i)',"",'print("Iteration ready!")'],settings:{code:"left",heapHeight:0,stackHeight:150,width:800},init:[["createFrame"],["createOperator","*","lr"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l0"],["_label","l1"],["setLine","1"],["_createIterator","i1","","1","5","Int"],["_label","l2"],["_iterate","i1","@l3","@l4"],["_label","l3"],["takeNext","i1","0"],["assign","i"],["setLine","2"],["addFunction","print","0","4"],["_disableAnimations"],["_disableStepping"],["addValue","2 *","0/0/0","str"],["addValueFromVariable","i","0/1/0"],["addValue","=","0/2/0","str"],["addValue","2","0/3/0","int"],["addOperator","*","0/3/1"],["addValueFromVariable","i","0/3/2"],["evaluateOperator","0/3/1"],["enableAnimations_"],["enableStepping_"],["evaluateFunction","0"],["setLine","1"],["goto","@l2"],["_label","l4"],["setLine","4"],["addFunction","print","0","1"],["addValue","Iteration ready!","0/0/0","str"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_strings={lines:['start = "This is "','end = "my first sentence!"',"","sentence = start + end","print(sentence)","","length = len(sentence)",'print("It has", length, "characters.")'],settings:{code:"top",heapHeight:0,stackHeight:150,width:800},init:[["createFrame"],["setLine","1"],["createOperator","+","lr"],["createFunction","print","print(value)","-1","-1"],["createFunction","len","len(value)","1","-1"]],steps:[["goto","@l0"],["_label","l0"],["addValue","This is ","0","str"],["assign","start"],["setLine","2"],["addValue","my first sentence!","0","str"],["assign","end"],["setLine","4"],["addValueFromVariable","start","0"],["addOperator","+","1"],["addValueFromVariable","end","2"],["evaluateOperator","1"],["assign","sentence"],["setLine","5"],["addFunction","print","0","1"],["addValueFromVariable","sentence","0/0/0"],["evaluateFunction","0"],["setLine","7"],["addFunction","len","0","1"],["addValueFromVariable","sentence","0/0/0"],["evaluateFunction","0"],["assign","length"],["setLine","8"],["addFunction","print","0","3"],["addValue","It has","0/0/0","str"],["addValueFromVariable","length","0/1/0"],["addValue","characters.","0/2/0","str"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_lists1={lines:["my_list = [1, 5, 9]","my_list.append(6)","","length = len(my_list)","first = my_list[0]","last = my_list[-1]","",'print("My list has", length, "items")','print("The first item is", first)','print("The last item is", last)'],settings:{code:"left",heapHeight:80,stackHeight:150,width:800},init:[["createFrame"],["createClass","list"],["createFunction","append","append(element)","1","-1","list"],["setLine","1"],["createOperator","[ ]","pr",""," [ # ]"],["createFunction","print","print(value)","-1","-1"],["createFunction","len","len(value)","1","-1"]],steps:[["goto","@l0"],["_label","l0"],["createInstance","list"],["addCollectionInitializer","-1","0","3"],["addValue","1","0/1/0","int"],["addValue","5","0/2/0","int"],["addValue","9","0/3/0","int"],["initializeCollection","0"],["assign","my_list"],["setLine","2"],["addValueFromVariable","my_list","0"],["addFunction","append","1","1","?"],["addValue","6","0/1/0","int"],["evaluateFunction","0"],["setLine","4"],["addFunction","len","0","1"],["addValueFromVariable","my_list","0/0/0"],["evaluateFunction","0"],["assign","length"],["setLine","5"],["addValueFromVariable","my_list","0"],["addOperator","[ ]","1"],["addValue","0","0/1/0","int"],["getValueAtIndex","0"],["assign","first"],["setLine","6"],["addValueFromVariable","my_list","0"],["addOperator","[ ]","1"],["addValue","-1","0/1/0","int"],["getValueAtIndex","0"],["assign","last"],["setLine","8"],["addFunction","print","0","3"],["addValue","My list has","0/0/0","str"],["addValueFromVariable","length","0/1/0"],["addValue","items","0/2/0","str"],["evaluateFunction","0"],["setLine","9"],["addFunction","print","0","2"],["addValue","The first item is","0/0/0","str"],["addValueFromVariable","first","0/1/0"],["evaluateFunction","0"],["setLine","10"],["addFunction","print","0","2"],["addValue","The last item is","0/0/0","str"],["addValueFromVariable","last","0/1/0"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_lists2={lines:["my_list = [1, 4, 7]","","for element in my_list:","    print(element)","",'print("These were the items in my list.")'],settings:{code:"left",heapHeight:80,stackHeight:150,width:800},init:[["createFrame"],["setLine","1"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l0"],["createInstance","list"],["addCollectionInitializer","-1","0","3"],["addValue","1","0/1/0","int"],["addValue","4","0/2/0","int"],["addValue","7","0/3/0","int"],["initializeCollection","0"],["assign","my_list"],["_label","l1"],["setLine","3"],["_createIterator","i1","@my_list"],["_label","l2"],["_iterate","i1","@l3","@l4"],["_label","l3"],["takeNext","i1","0"],["assign","element"],["setLine","4"],["addFunction","print","0","1"],["addValueFromVariable","element","0/0/0"],["evaluateFunction","0"],["setLine","3"],["goto","@l2"],["_label","l4"],["setLine","6"],["addFunction","print","0","1"],["addValue","These were the items in my list.","0/0/0","str"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_lists3={lines:["my_list = [7, 2, 3]","","for i in range(len(my_list)):","    my_list[i] = my_list[i] * 2","","","print(my_list)"],settings:{code:"left",heapHeight:80,stackHeight:150,width:800},init:[["createFrame"],["setLine","1"],["createOperator","[ ] =","pr","","[ # ] = #"],["createOperator","[ ]","pr",""," [ # ]"],["createOperator","*","lr"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l0"],["createInstance","list"],["addCollectionInitializer","-1","0","3"],["addValue","7","0/1/0","int"],["addValue","2","0/2/0","int"],["addValue","3","0/3/0","int"],["initializeCollection","0"],["assign","my_list"],["_label","l1"],["setLine","3"],["_createIterator","i1","","0","2","Int"],["_label","l2"],["_iterate","i1","@l3","@l4"],["_label","l3"],["takeNext","i1","0"],["assign","i"],["setLine","4"],["addValueFromVariable","my_list","0"],["addOperator","[ ] =","1"],["addValueFromVariable","i","0/1/0"],["addValueFromVariable","my_list","0/2/0"],["addOperator","[ ]","0/2/1"],["addValueFromVariable","i","0/2/0/1/0"],["getValueAtIndex","0/2/0"],["addOperator","*","0/2/1"],["addValue","2","0/2/2","int"],["evaluateOperator","0/2/1"],["setValueAtIndex","0"],["setLine","3"],["goto","@l2"],["_label","l4"],["setLine","7"],["addFunction","print","0","1"],["addValueFromVariable","my_list","0/0/0"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_findmax={lines:["my_list = [2, 6, 14, 9]","","biggest = my_list[0]","for value in my_list:","    if value > biggest:","        biggest = value","",'print("The biggest value is", biggest)'],settings:{code:"left",heapHeight:80,stackHeight:150,width:800},init:[["createFrame"],["setLine","1"],["createOperator","[ ]","pr",""," [ # ]"],["createOperator",">","lr"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l0"],["createInstance","list"],["addCollectionInitializer","-1","0","4"],["addValue","2","0/1/0","int"],["addValue","6","0/2/0","int"],["addValue","14","0/3/0","int"],["addValue","9","0/4/0","int"],["initializeCollection","0"],["assign","my_list"],["setLine","3"],["addValueFromVariable","my_list","0"],["addOperator","[ ]","1"],["addValue","0","0/1/0","int"],["getValueAtIndex","0"],["assign","biggest"],["_label","l1"],["setLine","4"],["_createIterator","i1","@my_list"],["_label","l2"],["_iterate","i1","@l3","@l4"],["_label","l3"],["takeNext","i1","0"],["assign","value"],["setLine","5"],["addValueFromVariable","value","0"],["addOperator",">","1"],["addValueFromVariable","biggest","2"],["evaluateOperator","1"],["_conditionalJump","@l5","@l6"],["_label","l5"],["setLine","6"],["addValueFromVariable","value","0"],["assign","biggest"],["_label","l6"],["setLine","4"],["goto","@l2"],["_label","l4"],["setLine","8"],["addFunction","print","0","2"],["addValue","The biggest value is","0/0/0","str"],["addValueFromVariable","biggest","0/1/0"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_functions1={lines:["def greet(name):","",'    print("Hello,", name)','    print("Nice to meet you!")',"","",'greet("John")'],settings:{code:"left",heapHeight:0,stackHeight:260,width:800},init:[["createFrame"],["createFunction","greet","greet(name)","1","@l1"],["setLine","7"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l1"],["setLine_","1"],["createParameterVariables",["name"]],["assignParameters",["name"]],["setLine","3"],["addFunction","print","0","2"],["addValue","Hello,","0/0/0","str"],["addValueFromVariable","name","0/1/0"],["evaluateFunction","0"],["setLine","4"],["addFunction","print","0","1"],["addValue","Nice to meet you!","0/0/0","str"],["evaluateFunction","0"],["addValue","None","0","None"],["returnValue"],["_label","l0"],["addFunction","greet","0","1"],["addValue","John","0/0/0","str"],["evaluateFunction","0"],["end"]]};
JSVEE.animations.ae_adl_functions2={lines:["def average(first, second):","    sum = first + second","    return sum / 2","","","result = average(2, 6)",'print("The average is", result)'],settings:{code:"left",heapHeight:0,stackHeight:260,width:800},init:[["createFrame"],["createFunction","average","average(first, second)","2","@l1"],["createOperator","+","lr"],["createOperator","/","lr"],["setLine","6"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l1"],["setLine_","1"],["createParameterVariables",["first","second"]],["assignParameters",["first","second"]],["setLine","2"],["addValueFromVariable","first","0"],["addOperator","+","1"],["addValueFromVariable","second","2"],["evaluateOperator","1"],["assign","sum"],["setLine","3"],["addValueFromVariable","sum","0"],["addOperator","/","1"],["addValue","2","2","int"],["evaluateOperator","1"],["returnValue"],["_label","l0"],["addFunction","average","0","2"],["addValue","2","0/0/0","int"],["addValue","6","0/1/0","int"],["evaluateFunction","0"],["assign","result"],["setLine","7"],["addFunction","print","0","2"],["addValue","The average is","0/0/0","str"],["addValueFromVariable","result","0/1/0"],["evaluateFunction","0"],["end"]]};
JSVEE.animations.ae_adl_functions3={lines:["def add_discount(sum, percentage):","    return sum * (1 - percentage)","","def add_taxes(sum, percentage):","    return sum * (1 + percentage)","","","products = 23.5 + 12.2 + 4.75","total = add_taxes(add_discount(products, 0.05), 0.13)",'print("The total sum is", total)'],settings:{code:"aboveHeapAndPanels",codeWidth:380,literalsLeft:"true",heapHeight:0,stackHeight:270,width:800,rightPanelsWidth:350},init:[["createFrame"],["createFunction","add_discount","add_discount(sum, percentage)","2","@l1"],["createOperator","*","lr"],["createOperator","-","lr"],["createFunction","add_taxes","add_taxes(sum, percentage)","2","@l2"],["createOperator","+","lr"],["setLine","8"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l1"],["setLine_","1"],["createParameterVariables",["sum","percentage"]],["assignParameters",["sum","percentage"]],["setLine","2"],["addValueFromVariable","sum","0"],["addOperator","*","1"],["addValue","1","2","int"],["addOperator","-","3"],["addValueFromVariable","percentage","4"],["evaluateOperator","3"],["evaluateOperator","1"],["returnValue"],["_label","l2"],["setLine_","4"],["createParameterVariables",["sum","percentage"]],["assignParameters",["sum","percentage"]],["setLine","5"],["addValueFromVariable","sum","0"],["addOperator","*","1"],["addValue","1","2","int"],["addOperator","+","3"],["addValueFromVariable","percentage","4"],["evaluateOperator","3"],["evaluateOperator","1"],["returnValue"],["_label","l0"],["addValue","23.5","0","float"],["addOperator","+","1"],["addValue","12.2","2","float"],["evaluateOperator","1"],["addOperator","+","1"],["addValue","4.75","2","float"],["evaluateOperator","1"],["assign","products"],["setLine","9"],["addFunction","add_taxes","0","2"],["addFunction","add_discount","0/0/0","2"],["addValueFromVariable","products","0/0/0/0/0"],["addValue","0.05","0/0/0/1/0","float"],["evaluateFunction","0/0/0"],["addValue","0.13","0/1/0","float"],["evaluateFunction","0"],["assign","total"],["setLine","10"],["addFunction","print","0","2"],["addValue","The total sum is","0/0/0","str"],["addValueFromVariable","total","0/1/0"],["evaluateFunction","0"],["end"]]};
JSVEE.animations.ae_adl_recursion={lines:["def factorial(n):","    if n < 3:","        return n","    else:","        return factorial(n - 1) * n","","",'print("Factorial of 4 is:", factorial(4))'],settings:{code:"aboveHeapAndPanels",literalsLeft:"true",heapHeight:0,stackHeight:550,width:800,codeWidth:310,rightPanelsWidth:250},init:[["createFrame"],["createFunction","factorial","factorial(n)","1","@l1"],["createOperator","<","lr"],["createOperator","-","lr"],["createOperator","*","lr"],["setLine","8"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l1"],["setLine_","1"],["createParameterVariables",["n"]],["assignParameters",["n"]],["setLine","2"],["addValueFromVariable","n","0"],["addOperator","<","1"],["addValue","3","2","int"],["evaluateOperator","1"],["_conditionalJump","@l2","@l3"],["_label","l2"],["setLine","3"],["addValueFromVariable","n","0"],["returnValue"],["_goto","@l4"],["_label","l3"],["setLine","5"],["addFunction","factorial","0","1"],["addValueFromVariable","n","0/0/0"],["addOperator","-","0/0/1"],["addValue","1","0/0/2","int"],["evaluateOperator","0/0/1"],["evaluateFunction","0"],["addOperator","*","1"],["addValueFromVariable","n","2"],["evaluateOperator","1"],["returnValue"],["_label","l4"],["_label","l0"],["addFunction","print","0","2"],["addValue","Factorial of 4 is:","0/0/0","str"],["addFunction","factorial","0/1/0","1"],["addValue","4","0/1/0/0/0","int"],["evaluateFunction","0/1/0"],["evaluateFunction","0"],["end"]]};
JSVEE.animations.ae_adl_dict1={lines:["def add_numbers(phonebook):",'  phonebook["George"] = "555-4523"','  phonebook["Mike"] = "555-7412"','  phonebook["Lisa"] = "555-6398"',"","def main():","  numbers = {}","  add_numbers(numbers)","","  count = len(numbers)",'  print("Number count:", count)',"",'  if "Mike" in numbers:','    print(numbers["Mike"])',"  else:",'    print("There is no number for Mike.")',"",'  numbers["Mike"] = "555-6852"','  mike = numbers["Mike"]',"",'  if "Marissa" in numbers:','    print(numbers["Marissa"])',"  else:",'    print("There is no number for Marissa.")',"","main()"],settings:{code:"left",heapHeight:80,stackHeight:380,width:900},init:[["createFrame"],["createFunction","add_numbers","add_numbers(phonebook)","1","@l1"],["createOperator","[ ] =","pr","","[ # ] = #"],["createFunction","main","main()","0","@l2"],["createOperator","in","lr"],["createOperator","[ ]","pr",""," [ # ]"],["setLine","26"],["createFunction","print","print(value)","-1","-1"],["createFunction","len","len(collection)","1","-1"]],steps:[["goto","@l0"],["_label","l1"],["setLine_","1"],["createParameterVariables",["phonebook"]],["assignParameters",["phonebook"]],["setLine","2"],["addValueFromVariable","phonebook","0"],["addOperator","[ ] =","1"],["addValue","George","0/1/0","str"],["addValue","555-4523","0/2/0","str"],["setValueByKey","0"],["setLine","3"],["addValueFromVariable","phonebook","0"],["addOperator","[ ] =","1"],["addValue","Mike","0/1/0","str"],["addValue","555-7412","0/2/0","str"],["setValueByKey","0"],["setLine","4"],["addValueFromVariable","phonebook","0"],["addOperator","[ ] =","1"],["addValue","Lisa","0/1/0","str"],["addValue","555-6398","0/2/0","str"],["setValueByKey","0"],["addValue","None","0","None"],["returnValue"],["_label","l2"],["setLine_","6"],["setLine","7"],["createInstance","dict"],["addReference","-1","0"],["assign","numbers"],["setLine","8"],["addFunction","add_numbers","0","1"],["addValueFromVariable","numbers","0/0/0"],["evaluateFunction","0"],["setLine","10"],["addFunction","len","0","1"],["addValueFromVariable","numbers","0/0/0"],["evaluateFunction","0"],["assign","count"],["setLine","11"],["addFunction","print","0","2"],["addValue","Number count:","0/0/0","str"],["addValueFromVariable","count","0/1/0"],["evaluateFunction","0"],["setLine","13"],["addValue","Mike","0","str"],["addOperator","in","1"],["addValueFromVariable","numbers","2"],["evaluateOperator","1"],["_conditionalJump","@l3","@l4"],["_label","l3"],["setLine","14"],["addFunction","print","0","1"],["addValueFromVariable","numbers","0/0/0"],["addOperator","[ ]","0/0/1"],["addValue","Mike","0/0/0/1/0","str"],["getValueByKey","0/0/0"],["evaluateFunction","0"],["_goto","@l5"],["_label","l4"],["setLine","16"],["addFunction","print","0","1"],["addValue","There is no number for Mike.","0/0/0","str"],["evaluateFunction","0"],["_label","l5"],["setLine","18"],["addValueFromVariable","numbers","0"],["addOperator","[ ] =","1"],["addValue","Mike","0/1/0","str"],["addValue","555-6825","0/2/0","str"],["setValueByKey","0"],["setLine","19"],["addValueFromVariable","numbers","0"],["addOperator","[ ]","1"],["addValue","Mike","0/1/0","str"],["getValueByKey","0"],["assign","mike"],["setLine","21"],["addValue","Marissa","0","str"],["addOperator","in","1"],["addValueFromVariable","numbers","2"],["evaluateOperator","1"],["_conditionalJump","@l6","@l7"],["_label","l6"],["setLine","22"],["addFunction","print","0","1"],["addValueFromVariable","numbers","0/0/0"],["addOperator","[ ]","0/0/1"],["addValue","Marissa","0/0/0/1/0","str"],["getValueByKey","0/0/0"],["evaluateFunction","0"],["_goto","@l8"],["_label","l7"],["setLine","24"],["addFunction","print","0","1"],["addValue","There is no number for Marissa.","0/0/0","str"],["evaluateFunction","0"],["_label","l8"],["addValue","None","0","None"],["returnValue"],["_label","l0"],["addFunction","main","0","0"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_objects1={lines:["car = Car(30)","car.fuel(20)","gallons = car.fuel(60)","print(gallons)","car.drive(10)","print(car.get_fuel())","","another_car = Car(40)","another_car.fuel(10)"],settings:{code:"left",heapHeight:80,stackHeight:150,width:800},init:[["createFrame"],["setLine","1"],["createClass","Car"],["createFunction","__init__","__init__(tank_size)","1","-1","Car"],["createFunction","drive","drive(consumption)","1","-1","Car"],["createFunction","get_fuel","get_fuel()","1","-1","Car"],["createFunction","fuel","fuel(gallons)","1","-1","Car"],["createFunction","print","print(value)","1","-1"]],steps:[["goto","@l0"],["_label","l0"],["createInstance","Car"],["addReference","-1","0"],["addFunction","__init__","1","1","?"],["addValue","30","0/1/0","int"],["evaluateFunction","0"],["assign","car"],["setLine","2"],["addValueFromVariable","car","0"],["addFunction","fuel","1","1","?"],["addValue","20","0/1/0","int"],["evaluateFunction","0"],["setLine","3"],["addValueFromVariable","car","0"],["addFunction","fuel","1","1","?"],["addValue","60","0/1/0","int"],["evaluateFunction","0"],["assign","gallons"],["setLine","4"],["addFunction","print","0","1"],["addValueFromVariable","gallons","0/0/0"],["evaluateFunction","0"],["setLine","5"],["addValueFromVariable","car","0"],["addFunction","drive","1","1","?"],["addValue","10","0/1/0","int"],["evaluateFunction","0"],["setLine","6"],["addFunction","print","0","1"],["addValueFromVariable","car","0/0/0"],["addFunction","get_fuel","0/0/1","0","?"],["evaluateFunction","0/0/0"],["evaluateFunction","0"],["setLine","8"],["createInstance","Car"],["addReference","-1","0"],["addFunction","__init__","1","1","?"],["addValue","40","0/1/0","int"],["evaluateFunction","0"],["assign","another_car"],["setLine","9"],["addValueFromVariable","another_car","0"],["addFunction","fuel","1","1","?"],["addValue","10","0/1/0","int"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_objects2={lines:["class Car:","  def __init__(self, tank_size):","    self.tank_size = tank_size","    self.gas = 0","","  def fuel(self, gallons):","    added = min(gallons, self.tank_size - self.gas)","    self.gas = self.gas + added","    return added","","  def drive(self, consumption):","    if self.gas < consumption:","      return False","    self.gas = self.gas - consumption","    return True","","  def get_fuel(self):","    return self.gas","","  def has_more_fuel(self, another):","    return self.gas > another.gas","","car = Car(30)","gallons = car.fuel(60)","print(gallons)","car.drive(10)","print(car.get_fuel())","","another_car = Car(30)","print(car.has_more_fuel(another_car))"],settings:{code:"left",heapHeight:80,stackHeight:280,width:1000},init:[["createFrame"],["createClass","Car"],["createFunction","__init__","__init__(tank_size)","1","@l1","Car"],["createFunction","fuel","fuel(gallons)","1","@l2","Car"],["createOperator","-","lr"],["createOperator","+","lr"],["createFunction","drive","drive(consumption)","1","@l3","Car"],["createOperator","<","lr"],["createFunction","get_fuel","get_fuel()","1","@l7","Car"],["createFunction","has_more_gas","has_more_gas(another)","1","@l8","Car"],["createOperator",">","lr"],["setLine","23"],["createFunction","min","min(first, second)","2","-1"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l1"],["setLine_","2"],["createParameterVariables",["self","tank_size"]],["assignParameters",["self","tank_size"]],["setLine","3"],["addValueFromVariable","tank_size","0"],["assignField","tank_size","@self"],["setLine","4"],["addValue","0","0","int"],["assignField","gas","@self"],["addValueFromVariable","self","0"],["returnValue"],["_label","l2"],["setLine_","6"],["createParameterVariables",["self","gallons"]],["assignParameters",["self","gallons"]],["setLine","7"],["addFunction","min","0","2"],["addValueFromVariable","gallons","0/0/0"],["addValueFromField","tank_size","@self","0/1/0"],["addOperator","-","0/1/1"],["addValueFromField","gas","@self","0/1/2"],["evaluateOperator","0/1/1"],["evaluateFunction","0"],["assign","added"],["setLine","8"],["addValueFromField","gas","@self","0"],["addOperator","+","1"],["addValueFromVariable","added","2"],["evaluateOperator","1"],["assignField","gas","@self"],["setLine","9"],["addValueFromVariable","added","0"],["returnValue"],["_label","l3"],["setLine_","11"],["createParameterVariables",["self","consumption"]],["assignParameters",["self","consumption"]],["setLine","12"],["addValueFromField","gas","@self","0"],["addOperator","<","1"],["addValueFromVariable","consumption","2"],["evaluateOperator","1"],["_conditionalJump","@l4","@l5"],["_label","l4"],["setLine","13"],["addValue","False","0","bool"],["returnValue"],["_label","l5"],["setLine","14"],["addValueFromField","gas","@self","0"],["addOperator","-","1"],["addValueFromVariable","consumption","2"],["evaluateOperator","1"],["assignField","gas","@self"],["setLine","15"],["addValue","True","0","bool"],["returnValue"],["_label","l7"],["setLine_","17"],["createParameterVariables",["self"]],["assignParameters",["self"]],["setLine","18"],["addValueFromField","gas","@self","0"],["returnValue"],["_label","l8"],["setLine_","20"],["createParameterVariables",["self","another"]],["assignParameters",["self","another"]],["setLine","21"],["addValueFromField","gas","@self","0"],["addOperator",">","1"],["addValueFromField","gas","@another","2"],["evaluateOperator","1"],["returnValue"],["_label","l0"],["createInstance","Car"],["addReference","-1","0"],["addFunction","__init__","1","1","?"],["addValue","30","0/1/0","int"],["evaluateFunction","0"],["assign","car"],["setLine","24"],["addValueFromVariable","car","0"],["addFunction","fuel","1","1","?"],["addValue","60","0/1/0","int"],["evaluateFunction","0"],["assign","gallons"],["setLine","25"],["addFunction","print","0","1"],["addValueFromVariable","gallons","0/0/0"],["evaluateFunction","0"],["setLine","26"],["addValueFromVariable","car","0"],["addFunction","drive","1","1","?"],["addValue","10","0/1/0","int"],["evaluateFunction","0"],["setLine","27"],["addFunction","print","0","1"],["addValueFromVariable","car","0/0/0"],["addFunction","get_fuel","0/0/1","0","?"],["evaluateFunction","0/0/0"],["evaluateFunction","0"],["setLine","29"],["createInstance","Car"],["addReference","-1","0"],["addFunction","__init__","1","1","?"],["addValue","30","0/1/0","int"],["evaluateFunction","0"],["assign","another_car"],["setLine","30"],["addFunction","print","0","1"],["addValueFromVariable","car","0/0/0"],["addFunction","has_more_gas","0/0/1","1","?"],["addValueFromVariable","another_car","0/0/0/1/0"],["evaluateFunction","0/0/0"],["evaluateFunction","0"],["end"]]};
JSVEE.animations.ae_adl_objects3={lines:["class Account:","  def __init__(self):","    self.balance = 0","","  def deposit(self, sum):","    self.balance += sum","","  def withdraw(self, sum):","    self.balance -= sum","","  def get_balance(self):","    return self.balance","","","","","def main():","","  accounts = {}","  accounts[259] = Account()","  accounts[632] = Account()","","  accounts[259].deposit(500)","  accounts[632].deposit(800)","  account[259].withdraw(25)","","  print(accounts[259].get_balance())","  print(accounts[632].get_balance())","","","main()"],settings:{code:"left",heapHeight:80,stackHeight:370,width:900},init:[["createFrame"],["createClass","Account"],["createFunction","__init__","__init__(self)","1","@l1","Account"],["createFunction","deposit","deposit(self, sum)","1","@l2","Account"],["createOperator","+","lr"],["createFunction","withdraw","withdraw(self, sum)","1","@l3","Account"],["createOperator","-","lr"],["createFunction","get_balance","get_balance(self)","1","@l4","Account"],["createFunction","main","main()","0","@l5"],["createOperator","[ ] =","pr","","[ # ] = #"],["createOperator","[ ]","pr",""," [ # ]"],["createFunction","print","print(value)","-1","-1"],["setLine","31"]],steps:[["goto","@l999"],["_label","l1"],["setLine_","2"],["createParameterVariables",["self"]],["assignParameters",["self"]],["setLine","3"],["addValue","0","0","int"],["assignField","balance","@self"],["addValueFromVariable","self"],["returnValue"],["_label","l2"],["setLine_","5"],["createParameterVariables",["self","sum"]],["assignParameters",["self","sum"]],["setLine","6"],["addValueFromField","balance","@self","0"],["addOperator","+","1"],["addValueFromVariable","sum","2"],["evaluateOperator","1"],["assignField","balance","@self"],["addValue","None","0","None"],["returnValue"],["_label","l3"],["setLine_","8"],["createParameterVariables",["self","sum"]],["assignParameters",["self","sum"]],["setLine","9"],["addValueFromField","balance","@self","0"],["addOperator","-","1"],["addValueFromVariable","sum","2"],["evaluateOperator","1"],["assignField","balance","@self"],["addValue","None","0","None"],["returnValue"],["_label","l4"],["setLine_","11"],["createParameterVariables",["self"]],["assignParameters",["self"]],["setLine","12"],["addValueFromField","balance","@self","0"],["returnValue"],["_label","l5"],["setLine_","17"],["setLine","19"],["createInstance","dict"],["addReference","-1","0"],["assign","accounts"],["setLine","20"],["addValueFromVariable","accounts","0"],["addOperator","[ ] =","1"],["addValue","259","0/1/0","int"],["createInstance","Account"],["addReference","-1","0/2/0"],["addFunction","__init__","0/2/1","0","?"],["evaluateFunction","0/2/0"],["setValueByKey","0"],["setLine","21"],["addValueFromVariable","accounts","0"],["addOperator","[ ] =","1"],["addValue","632","0/1/0","int"],["createInstance","Account"],["addReference","-1","0/2/0"],["addFunction","__init__","0/2/1","0","?"],["evaluateFunction","0/2/0"],["setValueByKey","0"],["setLine","23"],["addValueFromVariable","accounts","0"],["addOperator","[ ]","1"],["addValue","259","0/1/0","int"],["getValueByKey","0"],["addFunction","deposit","1","1","?"],["addValue","500","0/1/0","int"],["evaluateFunction","0"],["setLine","24"],["addValueFromVariable","accounts","0"],["addOperator","[ ]","1"],["addValue","632","0/1/0","int"],["getValueByKey","0"],["addFunction","deposit","1","1","?"],["addValue","800","0/1/0","int"],["evaluateFunction","0"],["setLine","25"],["addValueFromVariable","accounts","0"],["addOperator","[ ]","1"],["addValue","259","0/1/0","int"],["getValueByKey","0"],["addFunction","withdraw","1","1","?"],["addValue","25","0/1/0","int"],["evaluateFunction","0"],["setLine","27"],["addFunction","print","0","1"],["addValueFromVariable","accounts","0/0/0"],["addOperator","[ ]","0/0/1"],["addValue","259","0/0/0/1/0","int"],["getValueByKey","0/0/0"],["addFunction","get_balance","0/0/1","0","?"],["evaluateFunction","0/0/0"],["evaluateFunction","0"],["setLine","28"],["addFunction","print","0","1"],["addValueFromVariable","accounts","0/0/0"],["addOperator","[ ]","0/0/1"],["addValue","632","0/0/0/1/0","int"],["getValueByKey","0/0/0"],["addFunction","get_balance","0/0/1","0","?"],["evaluateFunction","0/0/0"],["evaluateFunction","0"],["addValue","None","0","None"],["returnValue"],["_label","l999"],["addFunction","main","0","0"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_greet={lines:['name = input("What is your name?\\n")','print("Hello,", name)','print("Nice to meet you!")'],settings:{code:"left",heapHeight:0,stackHeight:150,width:800},init:[["createFrame"],["setLine","1"],["createFunction","print","print(value)","-1","-1"],["createFunction","input","input(prompt)","1","-1"]],steps:[["goto","@l0"],["_label","l0"],["createVariable","name"],["addFunction","input","0","1"],["addValue","What is your name?","0/0/0","str"],["evaluateFunction","0"],["assign","name"],["setLine","2"],["addFunction","print","0","2"],["addValue","Hello,","0/0/0","str"],["addValueFromVariable","name","0/1/0"],["evaluateFunction","0"],["setLine","3"],["addFunction","print","0","1"],["addValue","Nice to meet you!","0/0/0","str"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_input1={lines:['first = int(input("Give an integer:\\n"))','second = int(input("Give another integer:\\n"))','print("Sum is:", first + second)','print("Product is:", first * second)'],settings:{code:"top",heapHeight:0,stackHeight:150,width:800},init:[["createFrame"],["setLine","1"],["createOperator","+","lr"],["createOperator","*","lr"],["createFunction","int","int(value)","1","-1"],["createFunction","input","input(prompt)","1","-1"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l0"],["createVariable","first"],["addFunction","int","0","1"],["addFunction","input","0/0/0","1"],["addValue","Give an integer:","0/0/0/0/0","str"],["evaluateFunction","0/0/0"],["evaluateFunction","0"],["assign","first"],["setLine","2"],["createVariable","second"],["addFunction","int","0","1"],["addFunction","input","0/0/0","1"],["addValue","Give another integer:","0/0/0/0/0","str"],["evaluateFunction","0/0/0"],["evaluateFunction","0"],["assign","second"],["setLine","3"],["addFunction","print","0","2"],["addValue","Sum is:","0/0/0","str"],["addValueFromVariable","first","0/1/0"],["addOperator","+","0/1/1"],["addValueFromVariable","second","0/1/2"],["evaluateOperator","0/1/1"],["evaluateFunction","0"],["setLine","4"],["addFunction","print","0","2"],["addValue","Product is:","0/0/0","str"],["addValueFromVariable","first","0/1/0"],["addOperator","*","0/1/1"],["addValueFromVariable","second","0/1/2"],["evaluateOperator","0/1/1"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_input2={lines:['radius = float(input("Give the radius:\\n"))',"area = 3.14 * radius * radius",'print("Area of the circle is:", area)'],settings:{code:"top",heapHeight:0,stackHeight:150,width:800},init:[["createFrame"],["setLine","1"],["createOperator","*","lr"],["createFunction","float","float(value)","1","-1"],["createFunction","input","input(prompt)","1","-1"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l0"],["createVariable","radius"],["addFunction","float","0","1"],["addFunction","input","0/0/0","1"],["addValue","Give the radius:","0/0/0/0/0","str"],["evaluateFunction","0/0/0"],["evaluateFunction","0"],["assign","radius"],["setLine","2"],["createVariable","area"],["addValue","3.14","0","float"],["addOperator","*","1"],["addValueFromVariable","radius","2"],["evaluateOperator","1"],["addOperator","*","1"],["addValueFromVariable","radius","2"],["evaluateOperator","1"],["assign","area"],["setLine","3"],["addFunction","print","0","2"],["addValue","Area of the circle is:","0/0/0","str"],["addValueFromVariable","area","0/1/0"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_format1={lines:["first = 4","second = 5",'print("The values are {:d} and {:d}".format(first, second))'],settings:{code:"top",heapHeight:0,stackHeight:150,width:800},init:[["createFrame"],["setLine","1"],["createFunction","print","print(value)","-1","-1"],["createClass","str"],["createFunction","format","format(params)","-1","-1","str"]],steps:[["goto","@l0"],["_label","l0"],["createVariable","first"],["addValue","4","0","int"],["assign","first"],["setLine","2"],["createVariable","second"],["addValue","5","0","int"],["assign","second"],["setLine","3"],["addFunction","print","0","1"],["addValue","The values are {:d} and {:d}","0/0/0","str"],["addFunction","format","0/0/1","2","?"],["addValueFromVariable","first","0/0/0/1/0"],["addValueFromVariable","second","0/0/0/2/0"],["evaluateFunction","0/0/0"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_format2={lines:["pi = 3.141592653589793238",'print("Pi is ca. {:.3f}".format(pi))'],settings:{code:"top",heapHeight:0,stackHeight:150,width:800},init:[["createFrame"],["setLine","1"],["createFunction","print","print(value)","1","-1"],["createClass","str"],["createFunction","format","format(params)","1","-1","str"]],steps:[["goto","@l0"],["_label","l0"],["createVariable","pi"],["addValue","3.141592653589793238","0","float"],["assign","pi"],["setLine","2"],["addFunction","print","0","1"],["addValue","Pi is ca. {:.3f}","0/0/0","str"],["addFunction","format","0/0/1","1","?"],["addValueFromVariable","pi","0/0/0/1/0"],["evaluateFunction","0/0/0"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_returnvalue={lines:["def convert_to_euros(dollars):","  ratio = 0.8669","  return dollars * ratio","",'amount = float(input("Give the sum in dollars:\\n"))',"euros = convert_to_euros(amount)",'print("It is {:.2f} euros.".format(euros))'],settings:{code:"top",heapHeight:0,stackHeight:260,width:800},init:[["createFrame"],["createFunction","convert_to_euros","convert_to_euros(dollars)","1","@l1"],["createOperator","*","lr"],["setLine","5"],["createFunction","float","float(value)","1","-1"],["createFunction","print","print(value)","1","-1"],["createFunction","input","input(prompt)","1","-1"],["createClass","str"],["createFunction","format","format(params)","1","-1","str"]],steps:[["goto","@l0"],["_label","l1"],["setLine_","1"],["createParameterVariables",["dollars"]],["assignParameters",["dollars"]],["setLine","2"],["createVariable","ratio"],["addValue","0.8669","0","float"],["assign","ratio"],["setLine","3"],["addValueFromVariable","dollars","0"],["addOperator","*","1"],["addValueFromVariable","ratio","2"],["evaluateOperator","1"],["returnValue"],["_label","l0"],["addFunction","float","0","1"],["addFunction","input","0/0/0","1"],["addValue","Give the sum in dollars:","0/0/0/0/0","str"],["evaluateFunction","0/0/0"],["evaluateFunction","0"],["assign","amount"],["setLine","6"],["addFunction","convert_to_euros","0","1"],["addValueFromVariable","amount","0/0/0"],["evaluateFunction","0"],["assign","euros"],["setLine","7"],["addFunction","print","0","1"],["addValue","It is {:.2f} euros.","0/0/0","str"],["addFunction","format","0/0/1","1","?"],["addValueFromVariable","euros","0/0/0/1/0"],["evaluateFunction","0/0/0"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_vals_refs1={lines:["def change(number):","  number = 9",'  print("Number is now:", number)',"","","def main():","  number = 5","  change(number)",'  print("In main, number is now:", number)','  print("It did not change!")',"","","main()"],settings:{code:"left",heapHeight:0,stackHeight:385,width:900},init:[["createFrame"],["createFunction","change","change(number)","1","@l1"],["createFunction","main","main()","0","@l2"],["setLine","13"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l1"],["setLine_","1"],["createParameterVariables",["number"]],["assignParameters",["number"]],["setLine","2"],["addValue","9","0","int"],["assign","number"],["setLine","3"],["addFunction","print","0","2"],["addValue","Number is now:","0/0/0","str"],["addValueFromVariable","number","0/1/0"],["evaluateFunction","0"],["addValue","None","0","None"],["returnValue"],["_label","l2"],["setLine_","6"],["setLine","7"],["addValue","5","0","int"],["assign","number"],["setLine","8"],["addFunction","change","0","1"],["addValueFromVariable","number","0/0/0"],["evaluateFunction","0"],["setLine","9"],["addFunction","print","0","2"],["addValue","In main, number is now:","0/0/0","str"],["addValueFromVariable","number","0/1/0"],["evaluateFunction","0"],["setLine","10"],["addFunction","print","0","1"],["addValue","It did not change!","0/0/0","str"],["evaluateFunction","0"],["addValue","None","0","None"],["returnValue"],["_label","l0"],["addFunction","main","0","0"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_vals_refs2={lines:["def change(numbers):","  numbers[0] = 5","  print(numbers)","","","def main():","  numbers = [2, 8, 14]","  change(numbers)","  print(numbers)","","","main()"],settings:{code:"left",heapHeight:50,stackHeight:385,width:900},init:[["createFrame"],["createFunction","change","change(numbers)","1","@l1"],["createOperator","[ ] =","pr","","[ # ] = #"],["createFunction","main","main()","0","@l2"],["setLine","12"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l1"],["setLine_","1"],["createParameterVariables",["numbers"]],["assignParameters",["numbers"]],["setLine","2"],["addValueFromVariable","numbers","0"],["addOperator","[ ] =","1"],["addValue","0","0/1/0","int"],["addValue","5","0/2/0","int"],["setValueAtIndex","0"],["setLine","3"],["addFunction","print","0","1"],["addValueFromVariable","numbers","0/0/0"],["evaluateFunction","0"],["addValue","None","0","None"],["returnValue"],["_label","l2"],["setLine_","6"],["setLine","7"],["createInstance","list"],["addCollectionInitializer","-1","0","3"],["addValue","2","0/1/0","int"],["addValue","8","0/2/0","int"],["addValue","14","0/3/0","int"],["initializeCollection","0"],["assign","numbers"],["setLine","8"],["addFunction","change","0","1"],["addValueFromVariable","numbers","0/0/0"],["evaluateFunction","0"],["setLine","9"],["addFunction","print","0","1"],["addValueFromVariable","numbers","0/0/0"],["evaluateFunction","0"],["addValue","None","0","None"],["returnValue"],["_label","l0"],["addFunction","main","0","0"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_vals_refs3={lines:["def main():","  numbers = [1, 7, 18]","  original = numbers","  numbers[2] = 11","  print(original)","  print(numbers)",'  print("They both changed!")',"","main()"],settings:{code:"left",heapHeight:50,stackHeight:250,width:900},init:[["createFrame"],["createFunction","main","main()","0","@l1"],["createOperator","[ ] =","pr","","[ # ] = #"],["setLine","10"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l1"],["setLine_","1"],["setLine","2"],["createInstance","list"],["addCollectionInitializer","-1","0","3"],["addValue","1","0/1/0","int"],["addValue","7","0/2/0","int"],["addValue","18","0/3/0","int"],["initializeCollection","0"],["assign","numbers"],["setLine","3"],["addValueFromVariable","numbers","0"],["assign","original"],["setLine","4"],["addValueFromVariable","numbers","0"],["addOperator","[ ] =","1"],["addValue","2","0/1/0","int"],["addValue","11","0/2/0","int"],["setValueAtIndex","0"],["setLine","5"],["addFunction","print","0","1"],["addValueFromVariable","original","0/0/0"],["evaluateFunction","0"],["setLine","6"],["addFunction","print","0","1"],["addValueFromVariable","numbers","0/0/0"],["evaluateFunction","0"],["setLine","7"],["addFunction","print","0","1"],["addValue","They both changed!","0/0/0","str"],["evaluateFunction","0"],["addValue","None","0","None"],["returnValue"],["_label","l0"],["addFunction","main","0","0"],["evaluateFunction","0"]]};
JSVEE.animations.ae_python_intro={lines:["dollars = 200 + 250","euros = dollars * 1.122"],description:'<div style="font-family: sans-serif;"><p>This animated example is an intro for this kind of animations. In this first animation, we will see how basic arithmetic operations work and how variables are used to store data.</p></div>',explanations:{line1:"We will add two values and assign the result to variable dollars. Variables are shown as green boxes in these animations.",line2:"We will now use the previous result in this line and assign the result to another variable."},settings:{code:"left",heapHeight:0,stackHeight:0,width:800},init:[["createFrame"],["setLine","1"],["createOperator","+","lr"],["createOperator","*","lr"]],steps:[["goto","@l0"],["_label","l0"],["addValue","200","0","int"],["addOperator","+","1"],["addValue","250","2","int"],["evaluateOperator","1"],["assign","dollars"],["setLine","2"],["addValueFromVariable","dollars","0"],["addOperator","*","1"],["addValue","1.122","2","float"],["evaluateOperator","1"],["assign","euros"]]};
JSVEE.animations.ae_python_assignment={description:'<div style="font-family: sans-serif;"> <p>In this example, we will see how an assignment statement works. First, the right-hand side is evaluated and after that the value is assigned to the specified variable. If there is already a value, it will be replaced. Can you figure out what will be the final value in the variable before you start?</p></div>',explanations:{line2:"In this line, we will assign a new value to the same variable. The new value depends on the original value. After the assignment, the old value will be replaced with the new value.",line4:"We can use the same variable multiple times. Only after the right-hand side is evaluated, the original value of the variable will be replaced with the new value."},lines:["my_var = 3","my_var = my_var + 1","my_var = 1 + my_var","my_var = my_var + my_var"],settings:{code:"left",heapHeight:0,stackHeight:150,width:800},init:[["createFrame"],["setLine","1"],["createOperator","+","lr"]],steps:[["goto","@l0"],["_label","l0"],["addValue","3","0","int"],["assign","my_var"],["setLine","2"],["addValueFromVariable","my_var","0"],["addOperator","+","1"],["addValue","1","2","int"],["evaluateOperator","1"],["assign","my_var"],["setLine","3"],["addValue","1","0","int"],["addOperator","+","1"],["addValueFromVariable","my_var","2"],["evaluateOperator","1"],["assign","my_var"],["setLine","4"],["addValueFromVariable","my_var","0"],["addOperator","+","1"],["addValueFromVariable","my_var","2"],["evaluateOperator","1"],["assign","my_var"]]};
JSVEE.animations.ae_python_input={description:'<div style="font-family: sans-serif;"><p>In this example, we will use two important built-in functions. The function input is used to read data from the user and print is used to print out the given values.</p></div>',lines:['name = input("What is your name?")','print("What a lovely name", name)'],settings:{code:"top",heapHeight:0,stackHeight:150,width:800},init:[["createFrame"],["setLine","1"],["createFunction","input","input(prompt)","1","-1"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l0"],["addFunction","input","0","1"],["addValue","What is your name?","0/0/0","str"],["evaluateFunction","0"],["assign","name"],["setLine","2"],["addFunction","print","0","2"],["addValue","What a lovely name","0/0/0","str"],["addValueFromVariable","name","0/1/0"],["evaluateFunction","0"]]};
JSVEE.animations.ae_python_float={description:'<div style="font-family: sans-serif;"><p>This example shows how a type conversion works. Input returns the user\'s answer always as a string. Before we can use the given value for any calculations we must convert the string into a number. Here we use the built-in function float to convert the string into a decimal number.</p></div>',lines:['celsius = input("Give temperature in Celsius:")',"fahrenheit = 1.8 * float(celsius) + 32","print(fahrenheit)"],settings:{code:"top",heapHeight:0,stackHeight:150,width:800},init:[["createFrame"],["setLine","1"],["createOperator","*","lr"],["createOperator","+","lr"],["createFunction","float","float(value)","1","-1"],["createFunction","input","input(prompt)","1","-1"],["createFunction","print","print(value)","1","-1"]],steps:[["goto","@l0"],["_label","l0"],["addFunction","input","0","1"],["addValue","Give temperature in Celsius:","0/0/0","str"],["evaluateFunction","0"],["assign","celsius"],["setLine","2"],["addValue","1.8","0","float"],["addOperator","*","1"],["addFunction","float","2","1"],["addValueFromVariable","celsius","2/0/0"],["evaluateFunction","2"],["evaluateOperator","1"],["addOperator","+","1"],["addValue","32","2","int"],["evaluateOperator","1"],["assign","fahrenheit"],["setLine","3"],["addFunction","print","0","1"],["addValueFromVariable","fahrenheit","0/0/0"],["evaluateFunction","0"]]};
JSVEE.animations.ae_python_if={description:'<div style="font-family: sans-serif;"><p>This example shows how Boolean values <code>True</code> and <code>False</code> can be used together with the <code>if</code> statement. Based on the Boolean value, the <code>if</code> statement selects the next line to be executed. You can start this example over and try with another value.</div>',lines:['line = input("Give a number:")',"value = float(line)","if value > 5000:",'    print("Quite a big number!")',"else:",'    print("It was not that big...")','print("It\'s over now!")'],settings:{code:"left",heapHeight:0,stackHeight:150,width:800},init:[["createFrame"],["setLine","1"],["createOperator",">","lr"],["createFunction","float","float(value)","1","-1"],["createFunction","input","input(prompt)","1","-1"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l0"],["addFunction","input","0","1"],["addValue","Give a number:","0/0/0","str"],["evaluateFunction","0"],["assign","line"],["setLine","2"],["addFunction","float","0","1"],["addValueFromVariable","line","0/0/0"],["evaluateFunction","0"],["assign","value"],["setLine","3"],["addValueFromVariable","value","0"],["addOperator",">","1"],["addValue","5000","2","int"],["evaluateOperator","1"],["_conditionalJump","@l1","@l2"],["_label","l1"],["jumpTrue","4"],["addFunction","print","0","1"],["addValue","Quite a big number!","0/0/0","str"],["evaluateFunction","0"],["_goto","@l3"],["_label","l2"],["jumpFalse","6"],["addFunction","print","0","1"],["addValue","It was not that big...","0/0/0","str"],["evaluateFunction","0"],["_label","l3"],["setLine","7"],["addFunction","print","0","1"],["addValue","It's over now!","0/0/0","str"],["evaluateFunction","0"]]};
JSVEE.animations.ae_python_while={description:'<div style="font-family: sans-serif;"><p>In this animated example, we will see how the <code>while</code> loop works. The code lines inside the loop will be executed as long as the condition is true. The condition will be checked at the beginning of the each iteration. After you are ready with example, give zero and the program will end.</p></div>',lines:["positive = 0",'value = int(input("Give an integer:"))',"while value != 0:","  if value > 0:","    positive = positive + 1",'  value = int(input("Give an integer:"))','print("Positive numbers:", positive)'],settings:{code:"top",heapHeight:0,stackHeight:150,width:800},init:[["createFrame"],["setLine","1"],["createOperator","!=","lr"],["createOperator",">","lr"],["createOperator","+","lr"],["createFunction","int","int(value)","1","-1"],["createFunction","input","input(prompt)","1","-1"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l0"],["addValue","0","0","int"],["assign","positive"],["setLine","2"],["addFunction","int","0","1"],["addFunction","input","0/0/0","1"],["addValue","Give an integer:","0/0/0/0/0","str"],["evaluateFunction","0/0/0"],["evaluateFunction","0"],["assign","value"],["_label","l1"],["setLine","3"],["addValueFromVariable","value","0"],["addOperator","!=","1"],["addValue","0","2","int"],["evaluateOperator","1"],["_conditionalJump","@l2","@l3"],["_label","l2"],["jumpTrue","4"],["addValueFromVariable","value","0"],["addOperator",">","1"],["addValue","0","2","int"],["evaluateOperator","1"],["_conditionalJump","@l4","@l5"],["_label","l4"],["jumpTrue","5"],["addValueFromVariable","positive","0"],["addOperator","+","1"],["addValue","1","2","int"],["evaluateOperator","1"],["assign","positive"],["_label","l5"],["setLine","6"],["addFunction","int","0","1"],["addFunction","input","0/0/0","1"],["addValue","Give an integer:","0/0/0/0/0","str"],["evaluateFunction","0/0/0"],["evaluateFunction","0"],["assign","value"],["goto","@l1"],["_label","l3"],["jumpFalse","7"],["addFunction","print","0","2"],["addValue","Positive numbers:","0/0/0","str"],["addValueFromVariable","positive","0/1/0"],["evaluateFunction","0"]]};
JSVEE.animations.ae_python_for={description:'<div style="font-family: sans-serif;"><p>In this animated example, we will see how the <code>for</code> loop works. Instead of having a condition how long the iteration continues, with for loop there must always be a certain number of iterations that is specified when the loop starts. In this example we will just use the loop to iterate a number sequence but there will be more use cases as we will later see.</p></div>',lines:['print("The two times table starts with:")',"for i in range(3):",'  print(i, "* 2 =", i * 2)','print("That\'s it!")'],settings:{code:"top",heapHeight:0,stackHeight:150,width:800},init:[["createFrame"],["setLine","1"],["createOperator","*","lr"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l0"],["addFunction","print","0","1"],["addValue","The two times table starts with:","0/0/0","str"],["evaluateFunction","0"],["_label","l1"],["setLine","2"],["_createIterator","i1","","0","2","Int"],["_label","l2"],["_iterate","i1","@l3","@l4"],["_label","l3"],["takeNext","i1","0"],["assign","i"],["setLine","3"],["addFunction","print","0","3"],["addValueFromVariable","i","0/0/0"],["addValue","* 2 =","0/1/0","str"],["addValueFromVariable","i","0/2/0"],["addOperator","*","0/2/1"],["addValue","2","0/2/2","int"],["evaluateOperator","0/2/1"],["evaluateFunction","0"],["setLine","2"],["goto","@l2"],["_label","l4"],["jumpIterationReady","4"],["addFunction","print","0","1"],["addValue","That's it!","0/0/0","str"],["evaluateFunction","0"]]};
JSVEE.animations.ae_python_function={description:'<div style="font-family: sans-serif;"><p>In this example, we will see how functions work. In this case we will see how the parameter passing and the return value work. Please pay attention because functions are very important but sometimes hard to understand. Can you understand the difference between printing and returning a value after this example?</p></div>',lines:["def calculate_area(width, height):",'  print("Dimensions are:", width, height)',"  result = width * height","  return height","","def main():","  side1 = 12","  side2 = 10","  area = calculate_area(side1, side2)",'  print("Area is:", area)','  print("Area is:", calculate_area(2+3, 7+2))',"","main()"],settings:{code:"aboveHeapAndPanels",rightPanelsWidth:280,codeWidth:320,heapHeight:0,stackHeight:380,width:800,literalsLeft:true},init:[["createFrame"],["createFunction","calculate_area","calculate_area(width, height)","2","@l1"],["createOperator","*","lr"],["createOperator","+","lr"],["createFunction","main","main()","0","@l2"],["setLine","13"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l1"],["setLine_","1"],["createParameterVariables",["width","height"]],["assignParameters",["width","height"]],["setLine","2"],["addFunction","print","0","3"],["addValue","Dimensions are:","0/0/0","str"],["addValueFromVariable","width","0/1/0"],["addValueFromVariable","height","0/2/0"],["evaluateFunction","0"],["setLine","3"],["addValueFromVariable","width","0"],["addOperator","*","1"],["addValueFromVariable","height","2"],["evaluateOperator","1"],["assign","result"],["setLine","4"],["addValueFromVariable","result","0"],["returnValue"],["_label","l2"],["setLine_","6"],["setLine","7"],["addValue","12","0","int"],["assign","side1"],["setLine","8"],["addValue","10","0","int"],["assign","side2"],["setLine","9"],["addFunction","calculate_area","0","2"],["addValueFromVariable","side1","0/0/0"],["addValueFromVariable","side2","0/1/0"],["evaluateFunction","0"],["assign","area"],["setLine","10"],["addFunction","print","0","2"],["addValue","Area is:","0/0/0","str"],["addValueFromVariable","area","0/1/0"],["evaluateFunction","0"],["setLine","11"],["addFunction","print","0","2"],["addValue","Area is:","0/0/0","str"],["addFunction","calculate_area","0/1/0","2"],["addValue","2","0/1/0/0/0","int"],["addOperator","+","0/1/0/0/1"],["addValue","3","0/1/0/0/2","int"],["evaluateOperator","0/1/0/0/1"],["addValue","7","0/1/0/1/0","int"],["addOperator","+","0/1/0/1/1"],["addValue","2","0/1/0/1/2","int"],["evaluateOperator","0/1/0/1/1"],["evaluateFunction","0/1/0"],["evaluateFunction","0"],["addValue","None","0","None"],["returnValue"],["_label","l0"],["addFunction","main","0","0"],["evaluateFunction","0"]]};
JSVEE.animations.ae_python_list={description:'<div style="font-family: sans-serif;"><p>In this example, we will continue using functions. The new concept in this animation is a list. We can use lists to create a collection with multiple items. In this example, we have a function that finds those values in the list that are bigger than the given limit. The functions shows another very useful use case with <code>for</code> loops to iterate a list.</p></div>',lines:["def find(values, limit):","  bigger = []","  for value in values:","    if value > limit:","      bigger.append(value)","  return bigger","","def main():","  my_list = [2, 5, 4, 9]","  my_list.append(16)","  my_list[1] = 6","  first = my_list[0]","","  found = find(my_list, 8)","","  if len(found) > 0:","    print(found)","  else:",'    print("No values.")',"","main()"],settings:{code:"left",heapHeight:80,stackHeight:380,width:800},init:[["createFrame"],["createFunction","find","find(values, limit)","2","@l1"],["createOperator",">","lr"],["createFunction","main","main()","0","@l9"],["createClass","list"],["createFunction","append","append(element)","1","-1","list"],["createOperator","[ ] =","pr","","[ # ] = #"],["createFunction","len","len(collection)","1","-1"],["createOperator","[ ]","pr",""," [ # ]"],["setLine","21"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l1"],["setLine_","1"],["createParameterVariables",["values","limit"]],["assignParameters",["values","limit"]],["setLine","2"],["createInstance","list"],["addReference","-1","0"],["assign","bigger"],["_label","l2"],["setLine","3"],["_createIterator","i1","@values"],["_label","l3"],["_iterate","i1","@l4","@l5"],["_label","l4"],["takeNext","i1","0"],["assign","value"],["setLine","4"],["addValueFromVariable","value","0"],["addOperator",">","1"],["addValueFromVariable","limit","2"],["evaluateOperator","1"],["_conditionalJump","@l6","@l7"],["_label","l6"],["setLine","5"],["addValueFromVariable","bigger","0"],["addFunction","append","1","1","?"],["addValueFromVariable","value","0/1/0"],["evaluateFunction","0"],["_label","l7"],["setLine","3"],["goto","@l3"],["_label","l5"],["setLine","6"],["addValueFromVariable","bigger","0"],["returnValue"],["_label","l9"],["setLine_","8"],["setLine","9"],["createInstance","list"],["addCollectionInitializer","-1","0","4"],["addValue","2","0/1/0","int"],["addValue","5","0/2/0","int"],["addValue","4","0/3/0","int"],["addValue","9","0/4/0","int"],["initializeCollection","0"],["assign","my_list"],["setLine","10"],["addValueFromVariable","my_list","0"],["addFunction","append","1","1","?"],["addValue","16","0/1/0","int"],["evaluateFunction","0"],["setLine","11"],["addValueFromVariable","my_list","0"],["addOperator","[ ] =","1"],["addValue","1","0/1/0","int"],["addValue","6","0/2/0","int"],["setValueAtIndex","0"],["setLine","12"],["addValueFromVariable","my_list","0"],["addOperator","[ ]","1"],["addValue","0","0/1/0","int"],["getValueAtIndex","0"],["assign","first"],["setLine","14"],["addFunction","find","0","2"],["addValueFromVariable","my_list","0/0/0"],["addValue","8","0/1/0","int"],["evaluateFunction","0"],["assign","found"],["setLine","16"],["addFunction","len","0","1"],["addValueFromVariable","found","0/0/0"],["evaluateFunction","0"],["addOperator",">","1"],["addValue","0","2","int"],["evaluateOperator","1"],["_conditionalJump","@l10","@l11"],["_label","l10"],["setLine","17"],["addFunction","print","0","1"],["addValueFromVariable","found","0/0/0"],["evaluateFunction","0"],["_goto","@l12"],["_label","l11"],["setLine","19"],["addFunction","print","0","1"],["addValue","No values.","0/0/0","str"],["evaluateFunction","0"],["_label","l12"],["addValue","None","0","None"],["returnValue"],["_label","l0"],["addFunction","main","0","0"],["evaluateFunction","0"]]};
JSVEE.animations.ae_python_split={description:'<div style="font-family: sans-serif;"><p>In this example we will continue working with lists. We will see that strings can converted into a list by using the <code>split</code> method that splits a string with the given separator and returns a corresponding list. Please note that the values in the returned list are always strings.</p></div>',lines:["def main():",'  values = "45,23,67"','  my_list = values.split(",")',"  if len(my_list) > 0:","    biggest = int(my_list[0])","    sum = 0","    for value in my_list:","      value = int(value)","      sum = sum + value","      if value > biggest:","        biggest = value",'      print("Sum is:", sum)','    print("The biggest is:", biggest)',"  else:",'    print("You did not give any numbers.")',"","main()"],settings:{code:"left",heapHeight:80,stackHeight:250,width:900},init:[["createFrame"],["createFunction","main","main()","0","@l1"],["createOperator",">","lr"],["createOperator","[ ]","pr",""," [ # ]"],["createOperator","+","lr"],["setLine","17"],["createFunction","int","int(value)","1","-1"],["createFunction","len","len(collection)","1","-1"],["createFunction","print","print(value)","-1","-1"],["createFunction","input","input(prompt)","1","-1"],["createClass","str"],["createFunction","split","split(separator)","1","-1","str"]],steps:[["goto","@l0"],["_label","l1"],["setLine_","1"],["setLine","2"],["addValue","45,23,67","0","str"],["assign","values"],["setLine","3"],["addValueFromVariable","values","0"],["addFunction","split","1","1","?"],["addValue",",","0/1/0","str"],["evaluateFunction","0"],["assign","my_list"],["setLine","4"],["addFunction","len","0","1"],["addValueFromVariable","my_list","0/0/0"],["evaluateFunction","0"],["addOperator",">","1"],["addValue","0","2","int"],["evaluateOperator","1"],["_conditionalJump","@l2","@l3"],["_label","l2"],["setLine","5"],["addFunction","int","0","1"],["addValueFromVariable","my_list","0/0/0"],["addOperator","[ ]","0/0/1"],["addValue","0","0/0/0/1/0","int"],["getValueAtIndex","0/0/0"],["evaluateOperator","0"],["assign","biggest"],["setLine","6"],["addValue","0","0","int"],["assign","sum"],["_label","l5"],["setLine","7"],["_createIterator","i1","@my_list"],["_label","l6"],["_iterate","i1","@l7","@l8"],["_label","l7"],["takeNext","i1","0"],["assign","value"],["setLine","8"],["addFunction","int","0","1"],["addValueFromVariable","value","0/0/0"],["evaluateFunction","0"],["assign","value"],["setLine","9"],["addValueFromVariable","sum","0"],["addOperator","+","1"],["addValueFromVariable","value","2"],["evaluateOperator","1"],["assign","sum"],["setLine","10"],["addValueFromVariable","value","0"],["addOperator",">","1"],["addValueFromVariable","biggest","2"],["evaluateOperator","1"],["_conditionalJump","@l9","@l10"],["_label","l9"],["setLine","11"],["addValueFromVariable","value","0"],["assign","biggest"],["_label","l10"],["setLine","12"],["addFunction","print","0","2"],["addValue","Sum is:","0/0/0","str"],["addValueFromVariable","sum","0/1/0"],["evaluateFunction","0"],["setLine","7"],["goto","@l6"],["_label","l8"],["setLine","13"],["addFunction","print","0","2"],["addValue","The biggest is:","0/0/0","str"],["addValueFromVariable","biggest","0/1/0"],["evaluateFunction","0"],["_goto","@l4"],["_label","l3"],["setLine","15"],["addFunction","print","0","1"],["addValue","You did not give any numbers.","0/0/0","str"],["evaluateFunction","0"],["_label","l4"],["addValue","None","0","None"],["returnValue"],["_label","l0"],["addFunction","main","0","0"],["evaluateFunction","0"]]};
JSVEE.animations.ae_python_dict={description:'<div style="font-family: sans-serif;"><p>This animated example shows how dictionaries work. In a dictionary, there are pairs called key and value. With each key, there is always a value attached to it. By using the key, we can easily get the value. In addition to that getting the value is easy, it is also very fast and efficient because of the internal data structure that dictionaries use.</div>',lines:["def add_numbers(phonebook):",'  phonebook["John"] = "555-1234"','  phonebook["Matt"] = "555-1478"','  phonebook["Lisa"] = "555-9632"',"","def main():","  phonebook = {}","  add_numbers(phonebook)","","  count = len(phonebook)",'  print("Count:", phonebook)',"",'  if "Matt" in phonebook:','    print(phonebook["Matt"])',"  else:",'    print("His number is not available.")',"",'  phonebook["Matt"] = "555-2580"','  matt = phonebook["matt"]',"",'  if "Susan" in phonebook:','    print(phonebook["Susan"])',"  else:",'    print("Her number is not available.")',"","main()"],settings:{code:"left",heapHeight:80,stackHeight:380,width:900},init:[["createFrame"],["createFunction","add_numbers","add_numbers(phonebook)","1","@l1"],["createOperator","[ ] =","pr","","[ # ] = #"],["createFunction","main","main()","0","@l2"],["createOperator","in","lr"],["createOperator","[ ]","pr",""," [ # ]"],["setLine","26"],["createFunction","print","print(value)","-1","-1"],["createFunction","len","len(collection)","1","-1"]],steps:[["goto","@l0"],["_label","l1"],["setLine_","1"],["createParameterVariables",["phonebook"]],["assignParameters",["phonebook"]],["setLine","2"],["addValueFromVariable","phonebook","0"],["addOperator","[ ] =","1"],["addValue","John","0/1/0","str"],["addValue","555-1234","0/2/0","str"],["setValueByKey","0"],["setLine","3"],["addValueFromVariable","phonebook","0"],["addOperator","[ ] =","1"],["addValue","Matt","0/1/0","str"],["addValue","555-1748","0/2/0","str"],["setValueByKey","0"],["setLine","4"],["addValueFromVariable","phonebook","0"],["addOperator","[ ] =","1"],["addValue","Lisa","0/1/0","str"],["addValue","555-9632","0/2/0","str"],["setValueByKey","0"],["addValue","None","0","None"],["returnValue"],["_label","l2"],["setLine_","6"],["setLine","7"],["createInstance","dict"],["addReference","-1","0"],["assign","phonebook"],["setLine","8"],["addFunction","add_numbers","0","1"],["addValueFromVariable","phonebook","0/0/0"],["evaluateFunction","0"],["setLine","10"],["addFunction","len","0","1"],["addValueFromVariable","phonebook","0/0/0"],["evaluateFunction","0"],["assign","count"],["setLine","11"],["addFunction","print","0","2"],["addValue","Count:","0/0/0","str"],["addValueFromVariable","count","0/1/0"],["evaluateFunction","0"],["setLine","13"],["addValue","Matt","0","str"],["addOperator","in","1"],["addValueFromVariable","phonebook","2"],["evaluateOperator","1"],["_conditionalJump","@l3","@l4"],["_label","l3"],["setLine","14"],["addFunction","print","0","1"],["addValueFromVariable","phonebook","0/0/0"],["addOperator","[ ]","0/0/1"],["addValue","Matt","0/0/0/1/0","str"],["getValueByKey","0/0/0"],["evaluateFunction","0"],["_goto","@l5"],["_label","l4"],["setLine","16"],["addFunction","print","0","1"],["addValue","His number is not available.","0/0/0","str"],["evaluateFunction","0"],["_label","l5"],["setLine","18"],["addValueFromVariable","phonebook","0"],["addOperator","[ ] =","1"],["addValue","Matt","0/1/0","str"],["addValue","555-2580","0/2/0","str"],["setValueByKey","0"],["setLine","19"],["addValueFromVariable","phonebook","0"],["addOperator","[ ]","1"],["addValue","Matt","0/1/0","str"],["getValueByKey","0"],["assign","mat"],["setLine","21"],["addValue","Susan","0","str"],["addOperator","in","1"],["addValueFromVariable","phonebook","2"],["evaluateOperator","1"],["_conditionalJump","@l6","@l7"],["_label","l6"],["setLine","22"],["addFunction","print","0","1"],["addValueFromVariable","phonebook","0/0/0"],["addOperator","[ ]","0/0/1"],["addValue","Susan","0/0/0/1/0","str"],["getValueByKey","0/0/0"],["evaluateFunction","0"],["_goto","@l8"],["_label","l7"],["setLine","24"],["addFunction","print","0","1"],["addValue","Her number is not available.","0/0/0","str"],["evaluateFunction","0"],["_label","l8"],["addValue","None","0","None"],["returnValue"],["_label","l0"],["addFunction","main","0","0"],["evaluateFunction","0"]]};
JSVEE.animations.ae_python_file={description:'<div style="font-family: sans-serif;"><p>In this example, we will see how we can read the contents of a file. It is quite similar to iterating a list, the file just needs to be opened and after reading closed. Please note that the lines of a file will always be returned as strings that end with a newline character.</p></div>',lines:["def main():","",'  my_file = open("items.txt", "r")',"","  for line in my_file:","    line = line.rstrip()",'    parts = line.split(";")',"    count = int(parts[0])","    if count < 10:","       print(parts[1])","","  my_file.close()","","main()"],settings:{code:"left",heapHeight:40,stackHeight:280,width:900},init:[["createFrame"],["createFunction","main","main()","0","@l1"],["createOperator","[ ]","pr",""," [ # ]"],["createOperator","<","lr"],["setLine","14"],["createClass","file"],["createFunction","close","close()","1","-1","file"],["createClass","str"],["createFunction","split","split(separator)","1","-1","str"],["createFunction","rstrip","rstrip()","1","-1","str"],["createFunction","int","int(value)","1","-1"],["createFunction","open","open(file, mode)","2","-1"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l1"],["setLine_","1"],["setLine","3"],["addFunction","open","0","2"],["addValue","items.txt","0/0/0","str"],["addValue","r","0/1/0","str"],["evaluateFunction","0"],["assign","my_file"],["_label","l2"],["setLine","5"],["_createIterator","i1","@my_file"],["_label","l3"],["_iterate","i1","@l4","@l5"],["_label","l4"],["takeNext","i1","0"],["assign","line"],["setLine","6"],["addValueFromVariable","line","0"],["addFunction","rstrip","1","0","?"],["evaluateFunction","0"],["assign","line"],["setLine","7"],["addValueFromVariable","line","0"],["addFunction","split","1","1","?"],["addValue",";","0/1/0","str"],["evaluateFunction","0"],["assign","parts"],["setLine","8"],["_disableAnimations"],["runForward","6","Converting the string into a number"],["addFunction","int","0","1"],["addValueFromVariable","parts","0/0/0"],["addOperator","[ ]","0/0/1"],["addValue","0","0/0/0/1/0","int"],["getValueAtIndex","0/0/0"],["evaluateFunction","0"],["enableAnimations_"],["assign","count"],["setLine","9"],["addValueFromVariable","count","0"],["addOperator","<","1"],["addValue","10","2","int"],["evaluateOperator","1"],["_conditionalJump","@l6","@l7"],["_label","l6"],["setLine","10"],["addFunction","print","0","1"],["addValueFromVariable","parts","0/0/0"],["addOperator","[ ]","0/0/1"],["addValue","1","0/0/0/1/0","int"],["getValueAtIndex","0/0/0"],["evaluateFunction","0"],["_label","l7"],["setLine","5"],["goto","@l3"],["_label","l5"],["setLine","12"],["addValueFromVariable","my_file","0"],["addFunction","close","1","0","?"],["evaluateFunction","0"],["addValue","None","0","None"],["returnValue"],["_label","l0"],["addFunction","main","0","0"],["evaluateFunction","0"]]};
JSVEE.animations.ae_python_class1={description:'<div style="font-family: sans-serif;"><p>In this example, we will create two Bus instances and call methods to change and query the state of the object. The internal parts of the <code>Bus</code> class is not shown yet.</p></div>',lines:["bus1 = Bus(50)","bus1.take_passengers(40)","taken = bus1.take_passengers(60)","print(taken)","bus1.leave_passengers(10)","print(bus1.get_passenger_count())","","bus2 = Bus(60)","bus2.take_passengers(10)"],settings:{code:"left",heapHeight:80,stackHeight:150,width:800},init:[["createFrame"],["setLine","1"],["createClass","Bus"],["createFunction","__init__","__init__(capacity)","1","-1","Bus"],["createFunction","leave_passengers","leave_passengers(count)","1","-1","Bus"],["createFunction","get_passenger_count","get_passenger_count()","1","-1","Bus"],["createFunction","take_passengers","take_passengers(count)","1","-1","Bus"],["createFunction","print","print(value)","1","-1"]],steps:[["goto","@l0"],["_label","l0"],["createInstance","Bus"],["addReference","-1","0"],["addFunction","__init__","1","1","?"],["addValue","50","0/1/0","int"],["evaluateFunction","0"],["assign","bus1"],["setLine","2"],["addValueFromVariable","bus1","0"],["addFunction","take_passengers","1","1","?"],["addValue","40","0/1/0","int"],["evaluateFunction","0"],["setLine","3"],["addValueFromVariable","bus1","0"],["addFunction","take_passengers","1","1","?"],["addValue","60","0/1/0","int"],["evaluateFunction","0"],["assign","taken"],["setLine","4"],["addFunction","print","0","1"],["addValueFromVariable","taken","0/0/0"],["evaluateFunction","0"],["setLine","5"],["addValueFromVariable","bus1","0"],["addFunction","leave_passengers","1","1","?"],["addValue","10","0/1/0","int"],["evaluateFunction","0"],["setLine","6"],["addFunction","print","0","1"],["addValueFromVariable","bus1","0/0/0"],["addFunction","get_passenger_count","0/0/1","0","?"],["evaluateFunction","0/0/0"],["evaluateFunction","0"],["setLine","8"],["createInstance","Bus"],["addReference","-1","0"],["addFunction","__init__","1","1","?"],["addValue","60","0/1/0","int"],["evaluateFunction","0"],["assign","bus2"],["setLine","9"],["addValueFromVariable","bus2","0"],["addFunction","take_passengers","1","1","?"],["addValue","10","0/1/0","int"],["evaluateFunction","0"]]};
JSVEE.animations.ae_python_class2={description:'<div style="font-family: sans-serif;"><p>This example continues with the <code>Bus</code> class. Now we will see how the class is implemented and how the methods work.</p></div>',lines:["class Bus:","  def __init__(self, capacity):","    self.capacity = capacity","    self.passengers = 0","","  def take_passengers(self, count):","    added = min(count, self.capacity - self.passengers)","    self.passengers = self.passengers + added","    return added","","  def leave_passengers(self, count):","    if self.passengers < count:","      return False","    self.passengers = self.passengers - count","    return True","","  def get_passenger_count(self):","    return self.passengers","","  def is_bigger_than(self, other):","    return self.capacity > other.capacity","","bus1 = Bus(50)","count = bus.take_passengers(60)","print(count)","bus1.leave_passengers(10)","print(bus1.get_passenger_count())","","bus2 = Bus(30)","print(bus1.has_more_passengers(bus2))"],settings:{code:"left",heapHeight:80,stackHeight:280,width:1000},init:[["createFrame"],["createClass","Bus"],["createFunction","__init__","__init__(capacity)","1","@l1","Bus"],["createFunction","take_passengers","take_passengers(count)","1","@l2","Bus"],["createOperator","-","lr"],["createOperator","+","lr"],["createFunction","leave_passengers","leave_passengers(count)","1","@l3","Bus"],["createOperator","<","lr"],["createFunction","get_passenger_count","get_passenger_count()","1","@l7","Bus"],["createFunction","has_more_passengers","has_more_passengers(other)","1","@l8","Bus"],["createOperator",">","lr"],["setLine","23"],["createFunction","min","min(first, second)","2","-1"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l1"],["setLine_","2"],["createParameterVariables",["self","capacity"]],["assignParameters",["self","capacity"]],["setLine","3"],["addValueFromVariable","capacity","0"],["assignField","capacity","@self"],["setLine","4"],["addValue","0","0","int"],["assignField","passengers","@self"],["addValueFromVariable","self","0"],["returnValue"],["_label","l2"],["setLine_","6"],["createParameterVariables",["self","count"]],["assignParameters",["self","count"]],["setLine","7"],["addFunction","min","0","2"],["addValueFromVariable","count","0/0/0"],["addValueFromField","capacity","@self","0/1/0"],["addOperator","-","0/1/1"],["addValueFromField","passengers","@self","0/1/2"],["evaluateOperator","0/1/1"],["evaluateFunction","0"],["assign","added"],["setLine","8"],["addValueFromField","passengers","@self","0"],["addOperator","+","1"],["addValueFromVariable","added","2"],["evaluateOperator","1"],["assignField","passengers","@self"],["setLine","9"],["addValueFromVariable","added","0"],["returnValue"],["_label","l3"],["setLine_","11"],["createParameterVariables",["self","count"]],["assignParameters",["self","count"]],["setLine","12"],["addValueFromField","passengers","@self","0"],["addOperator","<","1"],["addValueFromVariable","count","2"],["evaluateOperator","1"],["_conditionalJump","@l4","@l5"],["_label","l4"],["setLine","13"],["addValue","False","0","bool"],["returnValue"],["_label","l5"],["setLine","14"],["addValueFromField","passengers","@self","0"],["addOperator","-","1"],["addValueFromVariable","count","2"],["evaluateOperator","1"],["assignField","passengers","@self"],["setLine","15"],["addValue","True","0","bool"],["returnValue"],["_label","l7"],["setLine_","17"],["createParameterVariables",["self"]],["assignParameters",["self"]],["setLine","18"],["addValueFromField","passengers","@self","0"],["returnValue"],["_label","l8"],["setLine_","20"],["createParameterVariables",["self","other"]],["assignParameters",["self","other"]],["setLine","21"],["addValueFromField","capacity","@self","0"],["addOperator",">","1"],["addValueFromField","capacity","@other","2"],["evaluateOperator","1"],["returnValue"],["_label","l0"],["createInstance","Bus"],["addReference","-1","0"],["addFunction","__init__","1","1","?"],["addValue","50","0/1/0","int"],["evaluateFunction","0"],["assign","bus1"],["setLine","24"],["addValueFromVariable","bus1","0"],["addFunction","take_passengers","1","1","?"],["addValue","60","0/1/0","int"],["evaluateFunction","0"],["assign","count"],["setLine","25"],["addFunction","print","0","1"],["addValueFromVariable","count","0/0/0"],["evaluateFunction","0"],["setLine","26"],["addValueFromVariable","bus1","0"],["addFunction","leave_passengers","1","1","?"],["addValue","10","0/1/0","int"],["evaluateFunction","0"],["setLine","27"],["addFunction","print","0","1"],["addValueFromVariable","bus1","0/0/0"],["addFunction","get_passenger_count","0/0/1","0","?"],["evaluateFunction","0/0/0"],["evaluateFunction","0"],["setLine","29"],["createInstance","Bus"],["addReference","-1","0"],["addFunction","__init__","1","1","?"],["addValue","30","0/1/0","int"],["evaluateFunction","0"],["assign","bus2"],["setLine","30"],["addFunction","print","0","1"],["addValueFromVariable","bus1","0/0/0"],["addFunction","is_bigger_than","0/0/1","1","?"],["addValueFromVariable","bus2","0/0/0/1/0"],["evaluateFunction","0/0/0"],["evaluateFunction","0"],["end"]]};
JSVEE.animations.ae_adl_dict2={lines:["def main():","","  points = {}","",'  points["Mary"] = 5','  points["John"] = 10',"",'  points["Mary"] = points["Mary"] + 15',"",'  print("Mary\'s points:", points["Mary"])','  print("John\'s points:", points["John"])',"","","main()"],settings:{code:"left",heapHeight:80,stackHeight:250,width:900},init:[["createFrame"],["createFunction","main","main()","0","@l1"],["createOperator","[ ] =","pr","","[ # ] = #"],["createOperator","[ ]","pr",""," [ # ]"],["createOperator","+","lr"],["setLine","14"],["createFunction","print","print(value)","-11","-1"]],steps:[["goto","@l0"],["_label","l1"],["setLine_","1"],["setLine","3"],["createInstance","dict"],["addReference","-1","0"],["assign","points"],["setLine","5"],["addValueFromVariable","points","0"],["addOperator","[ ] =","1"],["addValue","Mary","0/1/0","str"],["addValue","5","0/2/0","int"],["setValueByKey","0"],["setLine","6"],["addValueFromVariable","points","0"],["addOperator","[ ] =","1"],["addValue","John","0/1/0","str"],["addValue","10","0/2/0","int"],["setValueByKey","0"],["setLine","8"],["addValueFromVariable","points","0"],["addOperator","[ ] =","1"],["addValue","Mary","0/1/0","str"],["addValueFromVariable","points","0/2/0"],["addOperator","[ ]","0/2/1"],["addValue","Mary","0/2/0/1/0","str"],["getValueByKey","0/2/0"],["addOperator","+","0/2/1"],["addValue","15","0/2/2","int"],["evaluateOperator","0/2/1"],["setValueByKey","0"],["setLine","10"],["addFunction","print","0","2"],["addValue","Mary's points:","0/0/0","str"],["addValueFromVariable","points","0/1/0"],["addOperator","[ ]","0/1/1"],["addValue","Mary","0/1/0/1/0","str"],["getValueByKey","0/1/0"],["evaluateFunction","0"],["setLine","11"],["addFunction","print","0","2"],["addValue","John's points:","0/0/0","str"],["addValueFromVariable","points","0/1/0"],["addOperator","[ ]","0/1/1"],["addValue","John","0/1/0/1/0","str"],["getValueByKey","0/1/0"],["evaluateFunction","0"],["addValue","None","0","NoneType"],["returnValue"],["_label","l0"],["addFunction","main","0","0"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_dict3={lines:["def main():","","  ages = {}",'  ages["Mark"] = 7','  ages["Susan"] = 16','  ages["Bill"] = 36','  ages["Lisa"] = 22',"","  oldest = None","  max_age = None","","  for person in ages:","    if oldest == None or ages[person] > max_age:","      oldest = person","      max_age = ages[person]","","","",'  print("The oldest is:", oldest)','  print("Years:", max_age)',"","","","main()"],settings:{code:"left",heapHeight:80,stackHeight:250,width:900},init:[["createFrame"],["createFunction","main","main()","-1","@l1"],["createOperator","[ ] =","pr","","[ # ] = #"],["createOperator","==","lr"],["createOperator","or","n"],["createOperator","[ ]","pr",""," [ # ]"],["createOperator",">","lr"],["setLine","24"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l1"],["setLine_","1"],["setLine","3"],["createInstance","dict"],["addReference","-1","0"],["assign","ages"],["setLine","4"],["addValueFromVariable","ages","0"],["addOperator","[ ] =","1"],["addValue","Mark","0/1/0","str"],["addValue","7","0/2/0","int"],["setValueByKey","0"],["setLine","5"],["addValueFromVariable","ages","0"],["addOperator","[ ] =","1"],["addValue","Susan","0/1/0","str"],["addValue","16","0/2/0","int"],["setValueByKey","0"],["setLine","6"],["addValueFromVariable","ages","0"],["addOperator","[ ] =","1"],["addValue","Bill","0/1/0","str"],["addValue","36","0/2/0","int"],["setValueByKey","0"],["setLine","7"],["addValueFromVariable","ages","0"],["addOperator","[ ] =","1"],["addValue","Lisa","0/1/0","str"],["addValue","22","0/2/0","int"],["setValueByKey","0"],["setLine","9"],["addValue","None","0","NoneType"],["assign","oldest"],["setLine","10"],["addValue","None","0","NoneType"],["assign","max_age"],["_label","l2"],["setLine","12"],["_createIterator","i1","@ages"],["_label","l3"],["_iterate","i1","@l4","@l5"],["_label","l4"],["takeNext","i1","0"],["assign","person"],["setLine","13"],["addValueFromVariable","oldest","0"],["addOperator","==","1"],["addValue","None","2","NoneType"],["evaluateOperator","1"],["addOperator","or","1"],["evaluateOperator","1"],["conditionalJump_","@l10","@l9"],["_label","l9"],["removeElement_","1","true"],["addValueFromVariable","ages","0"],["addOperator","[ ]","1"],["addValueFromVariable","person","0/1/0"],["getValueByKey","0"],["addOperator",">","1"],["addValueFromVariable","max_age","2"],["evaluateOperator","1"],["_label","l10"],["_conditionalJump","@l6","@l7"],["_label","l6"],["setLine","14"],["addValueFromVariable","person","0"],["assign","oldest"],["setLine","15"],["addValueFromVariable","ages","0"],["addOperator","[ ]","1"],["addValueFromVariable","person","0/1/0"],["getValueByKey","0"],["assign","max_age"],["_label","l7"],["setLine","12"],["goto","@l3"],["_label","l5"],["setLine","19"],["addFunction","print","0","2"],["addValue","The oldest is:","0/0/0","str"],["addValueFromVariable","oldest","0/1/0"],["evaluateFunction","0"],["setLine","20"],["addFunction","print","0","2"],["addValue","Years:","0/0/0","str"],["addValueFromVariable","max_age","0/1/0"],["evaluateFunction","0"],["addValue","None","0","NoneType"],["returnValue"],["_label","l0"],["addFunction","main","0","0"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_tryexcept1={lines:["try:",'  a = "1"','  b = "two"',"  c = int(a) + int(b)",'  print("Sum is:", c)',"except ValueError:",'  print("Conversion failed!")',"",'print("All done!")'],settings:{code:"left",heapHeight:0,stackHeight:150,width:800},init:[["createFrame"],["setLine","2"],["createOperator","+","lr"],["createFunction","print","print(value)","-1","-1"],["createFunction","int","int(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l0"],["addValue","1","0","str"],["assign","a"],["setLine","3"],["addValue","two","0","str"],["assign","b"],["setLine","4"],["addFunction","int","0","1"],["addValueFromVariable","a","0/0/0"],["evaluateFunction","0"],["addOperator","+","1"],["addFunction","int","2","1"],["addValueFromVariable","b","2/0/0"],["evaluateFunction","2"],["setLine","7"],["addFunction","print","0","1"],["addValue","Conversion failed!","0/0/0","str"],["evaluateFunction","0"],["setLine","9"],["addFunction","print","0","1"],["addValue","All done!","0/0/0","str"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_tryexcept2={lines:["def average(a, b):","  sum = int(a) + int(b)","  return sum / 2","","","def main():","  try:",'    avg = average("1", "two")','    print("Avg is:", avg)',"  except ValueError:",'    print("Error occurred!")',"","","main()"],settings:{code:"left",heapHeight:0,stackHeight:380,width:900},init:[["createFrame"],["createFunction","average","average(a, b)","2","@l1"],["createOperator","+","lr"],["createOperator","/","lr"],["createFunction","main","main()","0","@l2"],["setLine","14"],["createFunction","int","int(value)","-1","-1"],["createFunction","print","print(value)","-1","-1"]],steps:[["goto","@l0"],["_label","l1"],["setLine_","1"],["createParameterVariables",["a","b"]],["assignParameters",["a","b"]],["setLine","2"],["addFunction","int","0","1"],["addValueFromVariable","a","0/0/0"],["evaluateFunction","0"],["addOperator","+","1"],["addFunction","int","2","1"],["addValueFromVariable","b","2/0/0"],["evaluateFunction","2"],["returnValue"],["_label","l2"],["setLine_","6"],["setLine","8"],["addFunction","average","0","2"],["addValue","1","0/0/0","str"],["addValue","two","0/1/0","str"],["evaluateFunction","0"],["setLine","11"],["addFunction","print","0","1"],["addValue","Error occurred!","0/0/0","str"],["evaluateFunction","0"],["addValue","None","0","NoneType"],["returnValue"],["_label","l0"],["addFunction","main","0","0"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_file1={lines:["def main():","",'  my_file = open("visitors.txt", "r")',"","  sum = 0","  count = 0","","  for line in my_file:","    visitors = int(line)","    sum = sum + visitors","    count = count + 1","","  my_file.close()","",'  print("On average", sum / count, "visitors.")',"","main()"],settings:{code:"left",heapHeight:80,stackHeight:250,width:900},init:[["createFrame"],["createFunction","main","main()","0","@l1"],["createOperator","+","lr"],["createOperator","/","lr"],["setLine","17"],["createFunction","open","open(file, mode)","2","-1"],["createFunction","print","print(value)","-1","-1"],["createClass","file"],["createFunction","close","close()","1","-1","file"],["createFunction","int","int(value)","1","-1"]],steps:[["goto","@l0"],["_label","l1"],["setLine_","1"],["setLine","3"],["addFunction","open","0","2"],["addValue","visitors.txt","0/0/0","str"],["addValue","r","0/1/0","str"],["evaluateFunction","0"],["assign","my_file"],["setLine","5"],["addValue","0","0","int"],["assign","sum"],["setLine","6"],["addValue","0","0","int"],["assign","count"],["_label","l2"],["setLine","8"],["_createIterator","i1","@my_file"],["_label","l3"],["_iterate","i1","@l4","@l5"],["_label","l4"],["takeNext","i1","0"],["assign","line"],["setLine","9"],["addFunction","int","0","1"],["addValueFromVariable","line","0/0/0"],["evaluateFunction","0"],["assign","visitors"],["setLine","10"],["addValueFromVariable","sum","0"],["addOperator","+","1"],["addValueFromVariable","visitors","2"],["evaluateOperator","1"],["assign","sum"],["setLine","11"],["addValueFromVariable","count","0"],["addOperator","+","1"],["addValue","1","2","int"],["evaluateOperator","1"],["assign","count"],["setLine","8"],["goto","@l3"],["_label","l5"],["setLine","13"],["addValueFromVariable","my_file","0"],["addFunction","close","1","0","?"],["evaluateFunction","0"],["setLine","15"],["addFunction","print","0","3"],["addValue","On average","0/0/0","str"],["addValueFromVariable","sum","0/1/0"],["addOperator","/","0/1/1"],["addValueFromVariable","count","0/1/2"],["evaluateOperator","0/1/1"],["addValue","visitors.","0/2/0","str"],["evaluateFunction","0"],["addValue","None","0","NoneType"],["returnValue"],["_label","l0"],["addFunction","main","0","0"],["evaluateFunction","0"]]};
JSVEE.animations.ae_adl_file2={lines:["def main():","",'  my_file = open("courses.txt", "r")','  category = "math"','  print("Courses in this category:")',"","  for line in my_file:","    line = line.rstrip()",'    parts = line.split(";")',"    if parts[0] == category:","      print(parts[1])","","  my_file.close()","","main()"],settings:{code:"left",heapHeight:100,stackHeight:250,width:900},init:[["createFrame"],["createFunction","main","main()","0","@l1"],["createOperator","[ ]","pr",""," [ # ]"],["createOperator","==","lr"],["setLine","15"],["createFunction","open","open(file, mode)","2","-1"],["createFunction","print","print(value)","-1","-1"],["createClass","file"],["createFunction","close","close()","1","-1","file"],["createClass","str"],["createFunction","split","split(separator)","1","-1","str"],["createFunction","rstrip","rstrip()","0","-1","str"]],steps:[["goto","@l0"],["_label","l1"],["setLine_","1"],["setLine","3"],["addFunction","open","0","2"],["addValue","courses.txt","0/0/0","str"],["addValue","r","0/1/0","str"],["evaluateFunction","0"],["assign","my_file"],["setLine","4"],["addValue","math","0","str"],["assign","category"],["setLine","5"],["addFunction","print","0","1"],["addValue","Courses in this category:","0/0/0","str"],["evaluateFunction","0"],["_label","l2"],["setLine","7"],["_createIterator","i1","@my_file"],["_label","l3"],["_iterate","i1","@l4","@l5"],["_label","l4"],["takeNext","i1","0"],["assign","line"],["setLine","8"],["addValueFromVariable","line","0"],["addFunction","rstrip","1","0","?"],["evaluateFunction","0"],["assign","line"],["setLine","9"],["addValueFromVariable","line","0"],["addFunction","split","1","1","?"],["addValue",";","0/1/0","str"],["evaluateFunction","0"],["assign","parts"],["setLine","10"],["addValueFromVariable","parts","0"],["addOperator","[ ]","1"],["addValue","0","0/1/0","int"],["getValueAtIndex","0"],["addOperator","==","1"],["addValueFromVariable","category","2"],["evaluateOperator","1"],["_conditionalJump","@l6","@l7"],["_label","l6"],["setLine","11"],["addFunction","print","0","1"],["addValueFromVariable","parts","0/0/0"],["addOperator","[ ]","0/0/1"],["addValue","1","0/0/0/1/0","int"],["getValueAtIndex","0/0/0"],["evaluateFunction","0"],["_label","l7"],["setLine","7"],["goto","@l3"],["_label","l5"],["setLine","13"],["addValueFromVariable","my_file","0"],["addFunction","close","1","0","?"],["evaluateFunction","0"],["addValue","None","0","NoneType"],["returnValue"],["_label","l0"],["addFunction","main","0","0"],["evaluateFunction","0"]]};
a(function(){a('.jsvee-animation-all, .jsvee-animation[data-id="ae_all"]').each(function(){var b=a(this);a.each(JSVEE.animations,function(d,e){if(d.substring(0,2)=="ae"){b.append(a("<p></p>").text(d));b.append(a("<div></div>").addClass("jsvee-animation").attr("data-id",d));var c=[];a.each(e.init,function(){if(this[0]=="setLine"){if(c.indexOf(this[1])<0){c.push(this[1])}}});a.each(e.steps,function(){if(this[0]=="setLine"||this[0].substring(0,4)=="jump"){if(c.indexOf(this[1])<0){c.push(this[1])}}});
b.append(a("<p></p>").text("Lines: "+c.join(", ")));b.append(a("<hr/>"))}});b.removeClass("jsvee-animation")});a(".jsvee-animation").each(function(){var b=a(this).data("id");if(b){new JSVEE.ui(b,this)}})})}(jQuery));