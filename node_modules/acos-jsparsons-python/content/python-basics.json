{
  "ps_hello": {
      "initial": "print(\"hello\")\nprint(\"world\")",
      "unittest": "",
      "instructions": "Construct a program that prints out hello and world on separate lines.",
      "type": "SIMPLE",
      "title": "",
      "description": "Printing hello world",
      "concepts": ["Call", "Str"],
      "order": 1
  },
  "ps_simple_function": {
      "initial": "def func():\n\tprint(\"Hello functions!\")\nfunc()",
      "unittest": "",
      "instructions": "Construct a program that prints out Hello functions.",
      "description": "Creating a function that prints hello world",
      "type": "SIMPLE",
      "title": "",
      "concepts": ["Call", "Str", "FunctionDef"],
      "order": 2
  },
  "ps_simple_params": {
      "initial": "def add_two(a):\n\treturn a+2\nprint(add_two(1))",
      "unittest": "",
      "instructions": "Construct a program that prints out 3",
      "type": "SIMPLE",
      "description": "Creating a function that takes a number, adds two to it, and returns it",
      "title": "",
      "concepts": ["Return", "Int", "Add", "Call", "arg", "FunctionDef"],
      "order": 3
  },
  "ps_return_bigger_or_none": {
      "initial": "pass\ndef return_bigger_or_none(a,b):\nreturn a\nif a <span class=\"jsparson-toggle\" data-type=\"ab\"></span> b:\nreturn b\nelif a <span class=\"jsparson-toggle\" data-type=\"ab\"></span> b:\nreturn None",
      "unittest": "\nimport unittestparson\nclass myTests(unittestparson.unittest):\n  def testOne(self):\n    self.assertEqual(return_bigger_or_none(1,2),2, \"function <code>return_bigger(1, 2)</code>.\")\n  def testTwo(self):\n    self.assertEqual(return_bigger_or_none(2,1),2, \"function <code>return_bigger(2, 1)</code>.\")\n  def testThree(self):\n    self.assertEqual(return_bigger_or_none(2,2),None, \"function <code>return_bigger(2, 2)</code>.\")\n_test_result = myTests().main()\n",
      "description": "Creating a function that returns a bigger value out of two numbers",
      "instructions": "Construct a function that returns the bigger value of the given arguments. If a and b are equal, it should return None.",
      "type": "UNITTEST",
      "title": "",
      "order": 4
  },
  "ps_python_addition": {
    "description": "python_addition",
    "instructions": "Construct a program that prints the value 8.",
    "initial": "first = 3\nfirst = first + 1\nfirst = first + first\nprint(first)",
    "description": "Practise ordering of lines to add to a correct number",
    "type": "SIMPLE",
    "title": "",
    "concepts": ["Int", "Add", "Call", "Assign"],
    "order": 5
  },
  "ps_python_iteration_addition": {
    "description": "python_iteration_addition",
    "instructions": "Construct a program that prints the value 8.",
    "description": "Creating a program with a while loop",
    "initial": "i = 0\nwhile i < 7:\n  i = i + 2\nprint(i)",
    "type": "SIMPLE",
    "title": "",
    "concepts": ["Int", "Add", "Lt", "While", "Call", "Assign"],
    "order": 6
  },
  "ps_python_iteration_multiplication" : {
    "description": "python_iteration_multiplication",
    "instructions": "Construct a program that prints values 1,2,4,8 and finally prints \"The end!\".",
    "initial": "value = 1\nwhile value < 9:\n  print(value)\n  value = value * 2\nprint(\"The end!\")",
    "type": "SIMPLE",
    "title": "",
    "description": "Creating a program that compares a value in a loop",
    "concepts": ["Int", "Lt", "While", "Call", "Str", "Assign", "Mult"],
    "order": 7
  },
  "ps_python_calculate_function": {
    "description": "python_calculate_function",
    "instructions": "Define a function that returns the second value multiplied by two and added by the first value. The program should print 23 at the end.",
    "initial": "def calculate(first, second):\n  return second * 2 + first\nresult = calculate(3, 2)\nprint(calculate(result, result + 1))",
    "type": "SIMPLE",
    "title": "",
    "description": "Creating and calling a function",
    "concepts": ["Return", "Int", "Add", "Call", "FunctionDef", "arg", "Assign", "Mult"],
    "order": 8
  },
  "ps_python_nested_calls": {
    "description": "python_nested_calls",
    "instructions": "First define a calculate function and then define double function (that returns the given value doubled). Then write a program that first prints out 20 and then 36.",
    "initial": "def calculate(first, second):\n  return second * 3 + first\ndef double(value):\n  return value * 2\nprint(double(double(5)))\nprint(calculate(double(3), 2 + calculate(5, 1)))",
    "type": "SIMPLE",
    "title": "",
    "description": "Creating multiple functions and nested function calls",
    "concepts": ["Return", "Int", "Add", "Call", "FunctionDef", "arg", "Mult"],
    "order": 9
  },
  "ps_python_recursive_factorial": {
    "description": "python_recursive_factorial",
    "instructions": "Define a function that returns the factorial of a given positive integer.",
    "initial": "def factorial(n):\n  if n < 3:\n    return n\n  else:\n    return factorial(n-1) * n\n",
    "type": "SIMPLE",
    "title": "",
    "description": "Creating a recursive function",
    "concepts": ["Return", "Sub", "Int", "Lt", "Call", "Mult", "arg", "FunctionDef", "If"],
    "order": 10
  },
  "ps_python_class_person": {
    "description": "python_class_person",
    "instructions": "Write a program that will print out \"Safiira. Nice to meet you!\"",
    "initial": "class Person:\n  def __init__(self, firstname, profession):\n    self.__name = firstname\n  def greet(self):\n    return self.__name + \". Nice to meet you!\"\nsafira = Person(\"Safiira\", \"biologist\")\nprint(safira.greet())",
    "type": "SIMPLE",
    "title": "",
    "description": "Creating a class and using it",
    "concepts": ["Return", "Attribute", "ClassDef", "Add", "Call", "Str", "arg", "Assign", "FunctionDef"],
    "order": 11
  },
  "ps_python_modulo_is_even": {
    "description": "python_modulo_is_even",
    "instructions": "Construct a function that will return True if a given number is even, otherwise false.",
    "initial": "def is_even(number):\n  if number % 2 == 0:\n    return True\n  else:\n   return False",
    "type": "SIMPLE",
    "title": "",
    "description": "Creating a function and using modulo",
    "concepts": ["Return", "Int", "arg", "Mod", "Eq", "FunctionDef", "If"],
    "order": 12
  },
  "ps_python_list_iteration_zoo": {
    "description": "python_list_iteration_zoo",
    "instructions": "Construct a program that prints out all the animals in the zoo-variable.",
    "initial": "zoo = [\"bear\", \"lion\", \"camel\"]\nfor animal in zoo:\n  print(animal)",
    "type": "SIMPLE",
    "title": "",
    "description": "Iterating over a list",
    "concepts": ["For", "Call", "List", "Assign", "Str"],
    "order": 13
  },
  "ps_python_nested_lists_indexing": {
    "description": "python_nested_lists_indexing",
    "instructions": "Construct a program that first prints out [[1, 2, 3], [4, 5, 6]], then [4, 5, 6], and finally 6.",
    "initial": "some_list = [[1, 2, 3], [4, 5, 6]]\nprint(some_list)\nprint(some_list[1])\nprint(some_list[1][2])",
    "type": "SIMPLE",
    "title": "",
    "description": "Practising list indexing",
    "concepts": ["Int", "Call", "List", "Assign", "Index"],
    "order": 14
  },
  "ps_python_string_indexing": {
    "description": "Python string indexing",
    "instructions": "Construct a program that first prints out strings \"Py\", \"th\", \"o\", and \"n\"",
    "initial": "word = \"Python\"\nprint(word[:2])\nprint(word[2:4])\nprint(word[-2])\nprint(word[5:])\n",
    "type": "SIMPLE",
    "title": "",
    "description": "Practising string slicing",
    "concepts": ["Index", "Slice", "Int", "Call", "USub", "Str", "Assign"],
    "order": 15
  },
  "ps_python_dict_keys": {
    "description": "Items in storage",
    "instructions": "storage-dictionary stores the amount of certain items in storage. Construct a program that prints out a list of all the items that there are more than one currently stored.",
    "initial": "storage = {\"cup\": 7, \"pen\": 0, \"lamp\": 4}\nfor item in storage:\n  if storage[item] > 0:\n    print(item)",
    "type": "SIMPLE",
    "title": "",
    "description": "Iterating a dictionary",
    "concepts": ["Index", "Gt", "For", "Int", "Dict", "Str", "Call", "Assign", "If"],
    "order": 16
  },
  "ps_python_dict_values": {
    "description": "dict values sum",
    "instructions": "Construct a program that prints out how many items in total are in storage. You can assume that a dictionary called storage has already been initialized.",
    "initial": "total_items = 0\nfor item_count in storage.values():\n  total_items += item_count\nprint(total_items)",
    "type": "SIMPLE",
    "title": "",
    "description": "Accessing dictionary values",
    "concepts": ["For", "Int", "Attribute", "AugAssign", "Add", "Call", "Assign"],
    "order": 17
  },
  "ps_python_list_to_dict": {
    "description": "ps_python_list_to_dict",
    "instructions": "Construct a program that prints out moo and oink, in that order.",
    "initial": "pairs = [(\"pig\", \"oink\"), (\"cow\", \"moo\")]\nanimals = dict(pairs)\nprint(animals.get(\"cow\"))\nprint(animals.get(\"pig\"))",
    "type": "SIMPLE",
    "title": "",
    "description": "Converting a list of tuples into a dictionary",
    "concepts": ["Tuple", "Attribute", "List", "Call", "Str", "Assign"],
    "order": 18
  },
  "ps_python_dict_filter": {
    "description": "ps_python_dict_filter",
    "instructions": "Construct a program that prints out all the circles that are larger than 5.",
    "initial": "circles = {\"blue\": 8, \"red\": 5, \"grey\": 7}\nfor circle in circles.items():\n  if(circle[1] > 5):\n    print(circle[0], \"circle is larger than\", 5)",
    "type": "SIMPLE",
    "title": "",
    "description": "Iterating over dictionary items",
    "concepts": ["Index", "Gt", "For", "Int", "Attribute", "Call", "Str", "Dict", "Assign", "If"],
    "order": 19
  },
  "ps_python_bigger_than": {
    "description": "ps_python_bigger_than",
    "instructions": "Assume that num1 and num2 have been initialized to numbers, so that number1 is bigger. Construct a program that correctly prints out that number1 is indeed bigger",
    "initial": "print(\"num1 is bigger:\", num1 > num2)\nprint(\"num1 is bigger:\", num1 < num2) #distractor",
    "type": "SIMPLE",
    "description": "Boolean statements as a function parameter",
    "title": "",
    "concepts": ["Lt", "Gt", "Call", "Str"],
    "order": 20
  },
  "ps_python_conditionals_temperature": {
    "description": "",
    "instructions": "Construct a program that prints out 'Cold', when the temperature is 15 degrees celcius or below, 'Moderate' when it is over 15 degrees but no more than 25 degrees, and 'Hot' when the temperature is over 25 degrees.",
    "initial": "if temperature  $$toggle::<::>::<=::>=$$ $$toggle::15::25$$:\nif temperature  $$toggle::<::>::<=::>=$$ $$toggle::15::25$$:\nprint(\"Cold\")\nelif temperature $$toggle::<::>::<=::>=$$ $$toggle::15::25$$:\nprint(\"Moderate\")\nelse:\nprint(\"Hot\")\n",
    "vartests": "[{ initcode : \"temperature=10\", code : \"\", message : \"Temperature is under 15 degrees\", variables : { __output : \"Cold\n\" } },{ initcode : \"temperature=15\", code : \"\", message : \"Temperature is 15 degrees\", variables : { __output : \"Cold\n\" } },{ initcode : \"temperature=20\", code : \"\", message : \"Temperature is 15-25 degrees\", variables : { __output : \"Moderate\n\" } },{ initcode : \"temperature=25\", code : \"\", message : \"Temperature is 25 degrees\", variables : { __output : \"Moderate\n\" } },{ initcode : \"temperature=30\", code : \"\", message : \"Temperature is over 25 degrees\", variables : { __output : \"Hot\n\" } } ] ",
    "type": "VARTEST",
    "description": "Practising if...elif...else statements",
    "title": "",
    "order": 21
  },
  "ps_python_printing_file_contents": {
    "description": "",
    "instructions": "Construct a program that opens up a file and prints out each line of the file",
    "initial": "try:\nfile_to_read = open(filename, \"r\")\nrow = file_to_read.readline()\nwhile row != \"\":\nprint(row)\nrow = file_to_read.readline()\nfile_to_read.close()\nexcept OSError:\nprint(\"Error reading the file. The program execution ends.\")",
    "vartests": "[{ initcode : \"class OSError():\n\tdef __init__(self,text):\n\t\tpass\nfile_opened = 'False'\nfilename = 'text.txt'\nclass MockFile:\n\tdef __init__(self):\n\t\tglobal file_opened\n\t\tfile_opened = 'True'\n\t\tself.content = ['Some','sample','text']\n\t\tself.counter = 0\n\tdef readline(self):\n\t\tif file_opened == 'False':\n\t\t\traise ValueError('I/O operation on closed file')\n\t\tif self.counter < len(self.content):\n\t\t\tline = self.content[self.counter] + '\\\n' \n\t\t\tself.counter = self.counter + 1\n\t\telse:\n\t\t\tline = ''\n\t\treturn line\n\tdef close(self):\n\t\tglobal file_opened\n\t\tfile_opened = 'False'\ndef open(open_file, mode):\n\tif open_file == 'text.txt':\n\t\treturn MockFile()\n\telse:\n\t\traise OSError('No such file or directory:' + str(open_file))\n\", code : \"\", message : \"Testing with filename set to 'text.txt'\", variables : { file_opened: 'False', __output : \"Some\n\nsample\n\ntext\n\n\" }  },{ initcode : \"class OSError():\n\tdef __init__(self,text):\n\t\tpass\nfilename = 'file_does_not_exist.txt'\nclass MockFile:\n\tdef __init__(self):\n\t\tself.content = ['Some','sample','text']\n\t\tself.counter = 0\n\tdef readline(self):\n\t\tif self.counter < len(self.content):\n\t\t\tline = self.content[self.counter] + '\\\n' \n\t\t\tself.counter = self.counter + 1\n\t\telse:\n\t\t\tline = ''\n\t\treturn line\n\tdef close(self):\n\t\tpass\ndef open(open_file, mode):\n\tif open_file == 'text.txt':\n\t\treturn MockFile()\n\telse:\n\t\traise OSError('No such file or directory:' + str(open_file))\n\", code : \"\", message : \"Testing with filename set to 'file_does_not_exist.txt'\", variables : { __output : \"Error reading the file. The program execution ends.\n\" }  }] ",
    "type": "VARTEST",
    "description": "Practising reading a file and printing its contents",
    "title": "",
    "order": 22
  },
  "ps_python_try_except": {
    "description": "",
    "instructions": "Construct a program that prints out various Celcius temperatures in Fahrenheit.",
    "initial": "def centigrade_to_fahrenheit(temp):\n\tif temp < -273.15:\n\t\traise ValueError(\"Temperature below absolute zero!\") \n\treturn temp*1.8+32\ntry:\n\tprint(centigrade_to_fahrenheit(temp_to_convert))\nexcept ValueError:\n\tprint(\"Temperature set impossibly low!\")\n",
    "vartests": "[{ initcode : \"temp_to_convert = 20\" , message: \"Converting temperature of 20 centigrades\", variables : { __output : \"68.0\n\" } }, { initcode : \"temp_to_convert = -30\" , message: \"Converting temperature of -30 centigrades\", variables : { __output : \"-22.0\n\" } }, { initcode : \"temp_to_convert = -300\" , message: \"Converting temperature of -300 centigrades\", variables : { __output : \"Temperature set impossibly low!\n\" }  }] ",
    "concepts": ["Return", "Raise", "Int", "Float", "Add", "ExceptHandler", "Lt", "Call", "USub", "Str", "arg", "Mult", "TryExcept", "FunctionDef", "If"],
    "type": "VARTEST",
    "description": "Practising exceptions",
    "title": "",
    "order": 23
  },
  "ps_python_nested_ifs": {
    "description": "",
    "instructions": "Construct a program that prints out a sentence depending on the time of day. Night is considered to be before 7 a.m., morning is from 7 a.m. until noon, afternoon is until 5 p.m. and rest is considered evening.",
    "initial": "if am_or_pm == \"am\":\n\tif hour < 7:\n\t\tprint(\"It is still night\")\n\telse:\n\t\tprint(\"It is morning\")\nelif am_or_pm == \"pm\":\n\tif hour <= 5:\n\t\tprint(\"It is afternoon\")\n\telse:\n\t\tprint(\"It is evening\")\n",
    "vartests": "[{ initcode : \"hour=4\nam_or_pm='am'\", code : \"\", message : \"4 a.m.\", variables : { __output : \"It is still night\n\" } },{ initcode : \"hour=8\nam_or_pm='am'\", code : \"\", message : \"8 a.m.\", variables : { __output : \"It is morning\n\" } },{ initcode : \"hour=2\nam_or_pm='pm'\", code : \"\", message : \"2 p.m.\", variables : { __output : \"It is afternoon\n\" } },{ initcode : \"hour=9\nam_or_pm='pm'\", code : \"\", message : \"9 p.m.\", variables : { __output : \"It is evening\n\" } }] ",
    "type": "VARTEST",
    "description": "Practising nested if statements",
    "concepts": ["LtE", "Int", "Lt", "Call", "Str", "Eq", "If"],
    "title": "",
    "order": 24
  },
  "ps_python_comparisons": {
    "description": "",
    "instructions": "Construct a program that prints out whether variable a is bigger than b.",
    "initial": "a_is_bigger = a $$toggle::<::>::<=::>=$$ b\nprint(a_is_bigger)\n",
    "vartests": "[{ initcode : \"a = 3\nb = 1\", code : \"\", message : \"\", variables : { __output : \"True\n\" } },{ initcode : \"a = 3\nb = 5\", code : \"\", message : \"\", variables : { __output : \"False\n\" } }, { initcode : \"a = 3\nb = 3\", code : \"\", message : \"\", variables : { __output : \"False\n\" } }] ",
    "type": "VARTEST",
    "description": "Practising using comparisons",
    "title": "",
    "order": 25
  },
  "ps_python_add_to_list": {
    "description": "",
    "instructions": "Construct a function that adds a given amount to all items in a list.",
    "initial": "def add_to_list_items(alist, amount):\n\tfor x in range(len(alist)):\n\t\talist[x] += amount\n",
    "vartests": "[{ initcode : \"some_list = [0,1,5]\nnumber = 7\", code : \"add_to_list_items(some_list,number)\nprint(some_list)\", message : \"some_list = [0,1,5], calling add_to_list_items(some_list,7) and  printing some_list.\", variables : { __output: \"[7, 8, 12]\n\" } }] ",
    "type": "VARTEST",
    "description": "Practising list indexing and modifying lists",
    "concepts": ["Index", "For", "AugAssign", "Add", "Call", "arg", "FunctionDef"],
    "title": "",
    "order": 26
  },
  "ps_python_swap": {
    "description": "",
    "instructions": "Construct a program that swaps the values of x and y variables.",
    "initial": "$$toggle::x::y::tmp$$ = $$toggle::x::y::tmp$$\n$$toggle::x::y::tmp$$ = $$toggle::x::y::tmp$$\n$$toggle::x::y::tmp$$ = $$toggle::x::y::tmp$$\n",
    "vartests": "[{initcode: \"x = 0\ny=2\", code: \"\", message: \"Testing with initial variable values x = 0 and y = 2\", variables: {x: 2}},{initcode: \"x = 3\ny=4\n\", code: \"\", message: \"Testing with initial variable values x = 3 and y = 4\", variables: {x: 4, y: 3}}]",
    "type": "VARTEST",
    "description": "Practising variable assignment",
    "title": "",
    "order": 27
  },
  "ps_python_xor": {
    "description": "",
    "instructions": "Construct a program that mimics a XOR gate (exclusive or). When input_a and input_b are the same, it should print out 0 and in other cases print out 1.",
    "initial": "if input_a == 1 $$toggle::and::or::not::$$ input_b == 1:\n\tprint($$toggle::0::1::$$)\nelif input_a == 0 $$toggle::and::or::not::$$ input_b == 0:\n\tprint($$toggle::0::1::$$)\nelse:\n\tprint($$toggle::0::1::$$)",
    "vartests": "[{ initcode : \"input_a = 0\ninput_b = 0\", code : \"\", message : \"Testing with input_a=0 and input_b=0\", variables : { __output : \"0\n\" } },{ initcode : \"input_a = 1\ninput_b = 1\", code : \"\", message : \"Testing with input_a=1 and input_b=1\", variables : { __output : \"0\n\" } }, { initcode : \"input_a = 1\ninput_b = 0\", code : \"\", message : \"Testing with input_a=1 and input_b=0\", variables : { __output : \"1\n\" } }, { initcode : \"input_a = 0\ninput_b = 1\", code : \"\", message : \"Testing with input_a=0 and input_b=1\", variables : { __output : \"1\n\" } }] ",
    "type": "VARTEST",
    "description": "Creating a XOR-gate using if...elif statements",
    "title": "",
    "order": 28
  },
  "ps_python_for_odd_or_even": {
    "description": "",
    "instructions": "Construct a program that goes through a list of numbers and prints out whether they are odd or even.",
    "initial": "for number in some_list:\n\tif number%2 == 0:\n\t\tprint(\"Even\")\n\telse:\n\t\tprint(\"Odd\")",
    "vartests": "[{ initcode : \"some_list = [4,2,9,5,3,12]\", code : \"\", message : \"Testing with some_list = [4,2,9,5,3,12]\", variables : { __output : \"Even\nEven\nOdd\nOdd\nOdd\nEven\n\" } }]",
    "type": "VARTEST",
    "description": "Practising iterating a list and using modulo",
    "title": "",
    "concepts": ["For", "Int", "Call", "Str", "Mod", "Eq", "If"],
    "order": 29
  },
  "ps_python_string_join": {
    "description": "",
    "instructions": "Construct a program that prints out a sentence from a given list of words.",
    "initial": "words = [\"this\", \"is\", \"a\", \"sentence\"]\nsentence = \" \".join(words)\nprint(sentence.capitalize() + \".\")",
    "type": "VARTEST",
    "vartests": "[{ initcode : \"\", code : \"\", message : \"Testing\", variables : { __output : \"This is a sentence.\n\" } }]",
    "title": "",
    "description": "Practising string methods",
    "concepts": ["Attribute", "List", "Add", "Call", "Str", "Assign"],
    "order": 30
  },
  "ps_python_try_adding": {
    "description": "",
    "instructions": "Construct a function that adds two numbers together and handles non-numeric input.",
    "initial": "def add_two_numbers(a,b):\n\ttry:\n\t\treturn a + b\n\texcept TypeError:\n\t\tprint(\"Can only add numbers together.\")",
    "type": "VARTEST",
    "vartests": "[{ initcode : \"\", code : \"a = add_two_numbers(1,2)\", message : \"Adding 1 and 2.\", variables : { a : 3 } }, { initcode : \"\", code : \"a = add_two_numbers(1,'b')\", message : \"Adding 1 and b.\", variables : { __output: \"Can only add numbers together.\n\" } }]",
    "title": "",
    "description": "Practising exception handling",
    "concepts": ["Attribute", "List", "Add", "Call", "Str", "Assign"],
    "order": 31
  },
  "ps_python_class_point": {
    "description": "",
    "instructions": "Construct a class Point which has a method to tell distance from another instance of Point.",
    "initial": "from math import sqrt\nclass Point:\n\tdef __init__(self, loc_x, loc_y):\n\t\tself.x = loc_x\n\t\tself.y = loc_y\n\tdef distance_from(self, another_point):\n\t\tx_dist = self.x - another_point.x\n\t\ty_dist = self.y - another_point.y\n\t\treturn sqrt(x_dist * x_dist + y_dist * y_dist)\n",
    "type": "VARTEST",
    "vartests": "[{ initcode : \"\", code : \"point_b = Point(4,5)\", message : \"Testing creating Point(4,5)\", variables : {  }  }, { initcode : \"\", code : \"point_a = Point(1,1)\npoint_b = Point(4,5)\ndist = point_a.distance_from(point_b)\", message : \"Testing distance_from Point(1,1) and Point(4,5)\", variables : {  dist: 5.0 }  }]",
    "title": "",
    "description": "Creating a class and using its methods",
    "concepts": ["Return", "Sub", "Attribute", "ClassDef", "alias", "Add", "Call", "ImportFrom", "arg", "Mult", "Assign", "FunctionDef"],
    "order": 32
  }
}
